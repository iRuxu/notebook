{"version":1577292216582,"name":"git","data":[{"column":[{"title":"创建","barcolor":"","fold":false,"box":[{"title":"初始化","fold":false,"list":[{"prefix":"git ","tag":"config --global user","suffix":".option val","desc":"git config --global user.name \"username\"\ngit config --global user.email user@example.com\n使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":".gitignore","suffix":"","desc":"需要被忽略的文件","url":"","summary":".gitignore 的格式规范如下：\n所有空行或者以 ＃ 开头的行都会被 Git 忽略。\n可以使用标准的 glob 模式匹配。\n匹配模式可以以（/）开头防止递归。\n匹配模式可以以（/）结尾指定目录。\n要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。\n所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。\n星号（*）匹配零个或多个任意字符；\n[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；\n问号（?）只匹配一个任意字符；\n如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。\n使用两个星号（*) 表示匹配任意中间目录，比如`a/**/z` 可以匹配 a/z, a/b/z 或 `a/b/c/z`等。","reference":"教程|http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html\n资料|https://rgb-24bit.github.io/blog/2018/glob.html","dot":""},{"prefix":"","tag":"ssh-keygen","suffix":"","desc":"1.查看是否已存在ssh密钥：`cd ~/.ssh`\n2.生成密钥：`ssh-keygen -t rsa -C \"username@mail.com\"` 按3个回车,密码为空\n3.得到文件：id\\_rsa私钥和id\\_rsa.pub公钥\n4.添加密钥~~到ssh：ssh-add $file.name~~","url":"","summary":"","reference":"","dot":""}]},{"title":"本地","fold":false,"list":[{"prefix":"git ","tag":"init","suffix":"","desc":"使用当前目录初始化一个项目","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"init ","suffix":"<path>","desc":"`git init dirname` 使用指定目录初始化一个项目","url":"","summary":"","reference":"","dot":""},{"prefix":"fork","tag":" ","suffix":"","desc":"从别人的项目分支一个版本至你的git服务器仓库","url":"","summary":"","reference":"","dot":""}]},{"title":"克隆","fold":false,"list":[{"prefix":"git ","tag":"clone ","suffix":"<url> --depth=1","desc":"`git clone xxx` dir缺省时，会创建一个和项目同名的目录\nurl支持多种数据传输协议，url可以为https:// 、git:// 、git@ 、user@server:path/to/repo.git等。","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"clone ","suffix":"<url> <path>","desc":"`git clone xxx dirname` 指定dir时生成对应的文件夹名\n`git clone xxx .` 直接克隆到当前目录下,不再生成项目名目录","url":"","summary":"","reference":"","dot":""},{"prefix":"server clone","tag":" ","suffix":"","desc":"`git clone -b gh-pages https://github.com/JX3BOX/$1.git`","url":"","summary":"","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"配置","fold":false,"list":[{"prefix":"git ","tag":"config --global ","suffix":"alias.<cmd> <cmd>","desc":"设置别名\n`git config --global alias.last 'log -1 HEAD'`\n`git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"`\n","url":"","summary":"\nGit 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号\n`git config --global alias.visual '!gitk'`","reference":"","dot":""},{"prefix":"git ","tag":"config --global","suffix":" $key $val","desc":"git config --global <配置名称> <配置的值>","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"config --list","suffix":"","desc":"查看各项设置值","url":"","summary":"","reference":"","dot":""},{"prefix":"config","tag":" ","suffix":"","desc":"# /etc/gitconfig\n系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。\n# ~/.gitconfig\n用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。\n# .git/config\n当前项目的 Git 目录中的配置文件（也就是工作目录中的）\n这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。","url":"","summary":"gitconfig文件设置\n[gui]\nencoding = utf-8","reference":"","dot":""}]},{"title":"Misc","fold":false,"list":[{"prefix":"git ","tag":"--version","suffix":"","desc":"查看版本号","url":"","summary":"","reference":"","dot":""},{"prefix":"git <verb> ","tag":"--help","suffix":"","desc":"命令帮助","url":"","summary":"","reference":"","dot":""}]},{"title":"参考资料","fold":false,"list":[{"prefix":"","tag":"官方手册","suffix":"","desc":"","url":"https://git-scm.com/docs","summary":"","reference":"","dot":""},{"prefix":"","tag":"Pro Git中文版","suffix":"","desc":"","url":"https://www.progit.cn/","summary":"","reference":"","dot":""},{"prefix":"","tag":"常用Git命令清单","suffix":"","desc":"","url":"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"入门教程","suffix":"","desc":"","url":"https://www.liaoxuefeng.com/wiki/896043488029600","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"修改","barcolor":"","fold":false,"box":[{"title":"查看","fold":false,"list":[{"prefix":"git ","tag":"status","suffix":"","desc":"检查状态 `git status`\n","url":"","summary":"","reference":"参考资料|https://git-scm.com/docs/git-status","dot":""},{"prefix":"git ","tag":"status ","suffix":"-s","desc":"简易查看 `git status -s` ","url":"","summary":"新添加的未跟踪文件前面有 ?? 标记\n新添加到暂存区中的文件前面有 A 标记\n修改过的文件前面有 M 标记。\n出现在右边的 M 表示该文件被修改了但是还没放入暂存区\n出现在靠左边的 M 表示该文件被修改了并放入了暂存区。\nAM状态的意思是，这个文件在我们将它添加到缓存之后又有改动","reference":"","dot":""}]},{"title":"添加","fold":false,"list":[{"prefix":"git ","tag":"add ","suffix":"<file> <file>","desc":"跟踪新文件，加入缓存区INDEX\n`git add file` 加入单个文件\n`git add file1 file2 file3` 加入多个文件\n","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"add ","suffix":"<glob>","desc":"加入指定匹配\n`git add *.js` \n`git add *`","url":"","summary":"","reference":"","dot":""}]},{"title":"提交","fold":false,"list":[{"prefix":"git ","tag":"commit","suffix":"","desc":"`git commit` 这种方式会启动文本编辑器以便输入本次提交的说明。\n默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。\n当然也可以按照 起步 介绍的方式，使用 git config --global core.editor 命令设定你喜欢的编辑软件。\n\n`git commit -m \"message\"` 提交修改，将缓存区内容添加到仓库中","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"commit ","suffix":"-a -m \"msg\"","desc":"跳过使用暂存区域直接提交（但不包含新建文件，仅修改与删除）\n`git commit -a -m \"message\"`","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"commit ","suffix":"--amend","desc":"撤销重做提交（覆盖上一次提交，由于遗漏某些文件等） `git commit --amend` ","url":"","summary":"","reference":"参考资料|https://www.progit.cn/#_undoing","dot":""}]},{"title":"对比","fold":true,"list":[{"prefix":"git ","tag":"diff","suffix":"","desc":"`git diff` : 尚未缓存的改动\n建议直接通过vscode git功能来查看","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"diff ","suffix":"--cached","desc":"`git diff --cached` : 查看已缓存的改动 (同git diff --staged [1.6+])\n`git diff HEAD` : 查看已缓存的与未缓存的所有改动\n`git diff --stat` : 显示摘要而非整个 diff","url":"","summary":"\n\n","reference":"","dot":""}]},{"title":"历史","fold":false,"list":[{"prefix":"git ","tag":"log","suffix":"","desc":"`git log` 显示全部提交记录\n`git log -n` 最近若干次记录","url":"","summary":"<table id=\"log_options\" class=\"tableblock frame-all grid-all stretch\">\n<caption class=\"title\">Table 2. <code>git log</code> 的常用选项</caption>\n<colgroup>\n<col style=\"width: 20%;\">\n<col style=\"width: 80%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">选项</th>\n<th class=\"tableblock halign-left valign-top\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>-p</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">按补丁格式显示每个更新之间的差异。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--stat</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">显示每次更新的文件修改统计信息。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--shortstat</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">只显示 --stat 中最后的行数修改添加移除统计。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--name-only</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅在提交信息后显示已修改的文件清单。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--name-status</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">显示新增、修改、删除的文件清单。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--abbrev-commit</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--relative-date</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">使用较短的相对时间显示（比如，“2 weeks ago”）。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--graph</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">显示 ASCII 图形表示的分支合并历史。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--pretty</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</p></td>\n</tr>\n</tbody>\n</table>\n<table id=\"limit_options\" class=\"tableblock frame-all grid-all stretch\">\n<caption class=\"title\">Table 3. 限制 <code>git log</code> 输出的选项</caption>\n<colgroup>\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 66.6667%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">选项</th>\n<th class=\"tableblock halign-left valign-top\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>-(n)</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示最近的 n 条提交</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--since</code>, <code>--after</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示指定时间之后的提交。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--until</code>, <code>--before</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示指定时间之前的提交。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--author</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示指定作者相关的提交。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--committer</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示指定提交者相关的提交。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>--grep</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示含指定关键字的提交</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>-S</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">仅显示添加或移除了某个关键字的提交</p></td>\n</tr>\n</tbody>\n</table>","reference":"参考资料|https://www.progit.cn/#_viewing_history","dot":""},{"prefix":"git ","tag":"log ","suffix":"--pretty=oneline","desc":"简化单行显示`git log --pretty=oneline`\n图形化 `git log --graph`\n美化显示 `git log --oneline --decorate --graph --all`","url":"","summary":"`git log --pretty=<format>`\n<table id=\"pretty_format\" class=\"tableblock frame-all grid-all stretch\">\n<caption class=\"title\">Table 1. <code>git log --pretty=format</code> 常用的选项</caption>\n<colgroup>\n<col style=\"width: 20%;\">\n<col style=\"width: 80%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">选项</th>\n<th class=\"tableblock halign-left valign-top\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%H</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">提交对象（commit）的完整哈希字串</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%h</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">提交对象的简短哈希字串</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%T</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">树对象（tree）的完整哈希字串</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%t</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">树对象的简短哈希字串</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%P</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">父对象（parent）的完整哈希字串</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%p</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">父对象的简短哈希字串</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%an</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">作者（author）的名字</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%ae</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">作者的电子邮件地址</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%ad</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">作者修订日期（可以用 --date= 选项定制格式）</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%ar</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">作者修订日期，按多久以前的方式显示</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%cn</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">提交者（committer）的名字</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%ce</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">提交者的电子邮件地址</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%cd</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">提交日期</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%cr</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">提交日期，按多久以前的方式显示</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>%s</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">提交说明</p></td>\n</tr>\n</tbody>\n</table>","reference":"","dot":""},{"prefix":"git ","tag":"reflog","suffix":"","desc":"查看每一次命令","url":"","summary":"","reference":"","dot":""}]}]},{"title":"回退","barcolor":"","fold":false,"box":[{"title":"撤销文件添加","fold":false,"list":[{"prefix":"git ","tag":"rest HEAD ","suffix":"<file>","desc":"`git reset HEAD CONTRIBUTING.md` 取消暂存(add)的文件","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"rm --cached ","suffix":"<file>","desc":"`git rm --cached file` 移除缓存(commit)的文件，工作目录中保存","url":"","summary":"","reference":"","dot":""}]},{"title":"撤销文件修改","fold":false,"list":[{"prefix":"git ","tag":"checkout -- ","suffix":"<file>","desc":"`git checkout -- file` 丢弃工作区的修改（撤销距离上次状态后的文件改动）","url":"","summary":"","reference":"","dot":""}]},{"title":"撤销文件删除","fold":false,"list":[{"prefix":"git ","tag":"checkout ","suffix":"<commit> <file>","desc":"`git checkout [commit] [file]` 恢复某个commit的指定文件到暂存区和工作区","url":"","summary":"","reference":"","dot":""}]},{"title":"回档","fold":false,"list":[{"prefix":"git ","tag":"reset ","suffix":"<commit>","desc":"`git reset [commit]` 回档至指定版本,但工作区文件保留","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"reset --hard ","suffix":"<commit>","desc":"`git reset --hard [commit]`  回档至指定版本（上个版本）,同时重置暂存区和工作区","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"分支","barcolor":"","fold":false,"box":[{"title":"查看","fold":false,"list":[{"prefix":"git ","tag":"branch","suffix":"","desc":"查看所有分支","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"branch ","suffix":"-v","desc":"查看每一个分支的最后一次提交","url":"","summary":"","reference":"","dot":""}]},{"title":"创建","fold":false,"list":[{"prefix":"git ","tag":"symbolic-ref","suffix":"","desc":"创建新的空分支\n```\ngit symbolic-ref HEAD refs/heads/$branchname\nrm .git/index\ngit clean -fdx\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"checkout -b  ","suffix":"<branch>","desc":"`git branch dev` 基于当前提交对象创建分支\n`git checkout dev` 切换到指定分支\n`git checkout -b dev` 创建并切换到指定分支","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"branch ","suffix":"-r","desc":"创建远端同名分支\n`git branch -r` 拉取远程分支并创建本地分支","url":"","summary":"","reference":"","dot":""}]},{"title":"扩展","fold":false,"list":[{"prefix":"git ","tag":"checkout -b ","suffix":"<branch> <tag>","desc":"`git checkout -b version2 v2.0.0` 基于指定tag创建一个分支","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"checkout -b ","suffix":"<branch> <basebranch>","desc":"基于指定分支创建一个分支\n`git checkout -b dev master`","url":"","summary":"","reference":"","dot":""}]},{"title":"删除","fold":false,"list":[{"prefix":"git ","tag":"branch -d ","suffix":"<branch>","desc":"`git branch -d $name` 删除分支\n`git branch -D $name` 强行删除分支","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"push --delete ","suffix":"<remote> <branch>","desc":"`git push --delete origin test`\n删除远端分支","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"","tag":"main master","suffix":"","desc":"git branch -m main master\ngit fetch origin\ngit branch -u origin/master master\ngit remote set-head origin -a","url":"","summary":"","reference":"参考资料|https://www.jianshu.com/p/cc740394faf5","dot":""}]}]},{"title":"合并","barcolor":"","fold":false,"box":[{"title":"合并","fold":false,"list":[{"prefix":"git ","tag":"merge ","suffix":"<branch>","desc":"`git merge dev`  合并指定分支到当前分支","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"merge ","suffix":"<remote> <branch>","desc":"`git merge origin dev` 合并指定远端分支到当前分支","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"rebase ","suffix":"<branch>","desc":"`git rebase master` 将分支的基地同步为主分支","url":"","summary":"例如当前在测试分支，当前分支基于master分支的前一个版本而创建，此时master分支已经往后推进，此时直接使用`git rebase master` 将原先的改动直接基于新的master而且改动，而无需将master再合并到当前分支处理，使之更为整洁","reference":"参考资料|https://www.progit.cn/#_rebasing\n简易解释|https://blog.csdn.net/weixin_42310154/article/details/119004977","dot":""},{"prefix":"server merge","tag":" ","suffix":"","desc":"强制替换合并 `git fetch --all && git reset --hard origin/gh-pages` \n`git config --global alias.deploy '!f() { git fetch --all && git reset --hard origin/gh-pages; }; f'`","url":"","summary":"","reference":"","dot":""}]},{"title":"暂存","fold":false,"list":[{"prefix":"git ","tag":"stash","suffix":"","desc":"暂时将未提交的变化移除，稍后再移入","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"stash ","suffix":"pop","desc":"`git stash pop` 恢复暂存的","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"远端","barcolor":"","fold":false,"box":[{"title":"查看","fold":false,"list":[{"prefix":"git ","tag":"remote ","suffix":"-v","desc":"`git remote` 简要显示存在的remote名称\n`git remote -v` 查看全部远端详细信息","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"remote show ","suffix":"<remote>","desc":"`git remote show origin` 查看指定远端的分支等信息","url":"","summary":"","reference":"","dot":""}]},{"title":"增删","fold":false,"list":[{"prefix":"git ","tag":"remote add ","suffix":"<remote> <url>","desc":"添加一个远端地址\n`git remote add origin xxx@github.git`","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"remote remove ","suffix":"<remote>","desc":"移除指定远端","url":"","summary":"","reference":"","dot":""}]},{"title":"拉取","fold":false,"list":[{"prefix":"git ","tag":"fetch ","suffix":"<remote> <branch>","desc":"`git fetch origin` 获取远端内容\n`git fetch --all` 获取全部远端内容","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"pull ","suffix":"<remote> <branch>","desc":"`git pull origin master` 获取远端分支内容合并到当前分支","url":"","summary":"","reference":"","dot":""}]},{"title":"推送","fold":false,"list":[{"prefix":"git ","tag":"push ","suffix":"<remote> <branch>","desc":"`git push origin master` 推送当前分支到远端指定分支","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"push -f ","suffix":"<remote> <branch>","desc":"强制推送，适用于版本回退场景需覆盖远程","url":"","summary":"","reference":"","dot":""}]}]},{"title":"标签","barcolor":"","fold":false,"box":[{"title":"查看","fold":false,"list":[{"prefix":"git ","tag":"tag","suffix":"","desc":"查看所有标签\n`git tag -l \"v1.*\"` 过滤显示指定的tag","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"fetch --tags","suffix":"","desc":"`git ls-remote --tags origin` 直接查看远程仓库的 tags\n`git fetch --tags` 获取远程仓库中的 tags","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"show ","suffix":"<tag>","desc":"查看指定tag","url":"","summary":"","reference":"","dot":""}]},{"title":"增删","fold":false,"list":[{"prefix":"git ","tag":"tag ","suffix":"<tag>","desc":"给当前commit打tag","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"tag ","suffix":"<tag> <commit>","desc":"给指定commit打tag\n`git tag v1.2 a1b2c3 -m \"remark\"`","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"tag -d ","suffix":"<tag>","desc":"删除指定tag","url":"","summary":"","reference":"","dot":""}]},{"title":"远端","fold":false,"list":[{"prefix":"git ","tag":"push ","suffix":"<remote> <tag>","desc":"`git push origin v1.5` 推送指定tag\n`git push origin --tags` 推送全部tag","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"push --delete ","suffix":"<remote> <tag>","desc":"删除远端tag\n`git push origin --delete $tag`","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"子库","barcolor":"","fold":false,"box":[{"title":"增删","fold":false,"list":[{"prefix":"git ","tag":"submodule add ","suffix":"<url> <path>","desc":"添加子模块","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"rm ","suffix":"--cached <subpath>","desc":"1.删除 .gitsubmodule中对应submodule的条目\n2.删除 .git/config 中对应submodule的条目\n3.执行 git rm --cached {submodule_path}","url":"","summary":"","reference":"","dot":""}]},{"title":"初始化","fold":false,"list":[{"prefix":"git ","tag":"submodule init","suffix":"","desc":"子模块初始化","url":"","summary":"","reference":"","dot":""},{"prefix":"git ","tag":"submodule update","suffix":"","desc":"更新子模块","url":"","summary":"","reference":"","dot":""}]},{"title":"更新","fold":false,"list":[{"prefix":"git ","tag":"submodule sync","suffix":"","desc":"1.更新 .gitsubmodule中对应submodule的条目URL\n2.更新 .git/config 中对应submodule的条目的URL\n3.执行 git submodule sync","url":"","summary":"","reference":"","dot":""}]}]},{"title":"LFS","barcolor":"","fold":false,"box":[{"title":"安装","fold":false,"list":[{"prefix":"","tag":"brew install git-lfs","suffix":"","desc":"安装git-lfs `brew install git-lfs`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"git lfs install","suffix":"","desc":"启用git-lfs`git lfs install`","url":"","summary":"","reference":"","dot":""}]},{"title":"配置","fold":false,"list":[{"prefix":"","tag":".gitattributes","suffix":"","desc":"*.pth filter=lfs diff=lfs merge=lfs -text","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"github setting启用","suffix":"","desc":"GitHub 免费版对单个项目的最大大小限制是 1 GB，但是单个文件大小不能超过 100 MB。如果您的文件大小超过 100 MB，则需要使用 Git LFS 进行管理。而如果您的项目总大小超过 1 GB，则需要升级到 GitHub 收费版。","url":"","summary":"## LFS\n可以通过以下步骤配置 GitHub LFS 存储到其他服务器：\n1.在存储 LFS 文件的服务器上安装 Git LFS。\n2.配置 LFS 服务器的认证和存储设置。具体步骤可以参考 Git LFS 官方文档。\n修改 Git LFS 配置文件，将指向 GitHub LFS 存储的 URL 修改为新的 LFS 服务器 URL。可以通过以下命令查看配置文件路径：\n`git lfs env`\n3.然后打开对应的配置文件，将 lfs.url 的值修改为新的 LFS 服务器 URL。\n4.将本地仓库关联到新的 LFS 服务器。可以使用 git lfs migrate import 命令将原来存储在 GitHub LFS 中的 LFS 对象迁移至新的 LFS 服务器。具体步骤可以参考 Git LFS 官方文档。\n5.完成上述步骤后，您就可以将 LFS 对象存储到新的 LFS 服务器中了。同时，在 GitHub 上的 LFS 指针仍然会指向原来的 LFS 对象，这样其他人在使用您的仓库时也能够正常访问 LFS 文件。\n","reference":"","dot":""}]}]}]},{"column":[{"title":"钩子","barcolor":"","fold":false,"box":[{"title":"创建","fold":false,"list":[{"prefix":"path","tag":" ","suffix":"","desc":"1.目录：.git/hooks\n2.移除 .sample 后缀\n3.文件头指定脚本 `#!/usr/bin/env node`,默认`#!/bin/sh`\n4.增加可执行权限 `chmod 777 hook-filename`","url":"","summary":"","reference":"参考资料|https://github.com/zwhu/blog/issues/31","dot":""},{"prefix":"","tag":"客户端","suffix":"","desc":"<table>\n    <thead>\n        <tr>\n            <th>类型</th>\n            <th>钩子名称</th>\n            <th>接收参数</th>\n            <th>可否终止操作</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>提交工作流钩子</td>\n            <td>pre-commit</td>\n            <td> \\ </td>\n            <td>是</td>\n        </tr>\n        <tr>\n            <td>提交工作流钩子</td>\n            <td>prepare-commit-msg</td>\n            <td>filepath、committype、sha-1</td>\n            <td> \\ </td>\n        </tr>\n        <tr>\n            <td>提交工作流钩子</td>\n            <td>commit-msg</td>\n            <td>filepath</td>\n            <td>是</td>\n        </tr>\n        <tr>\n            <td>提交工作流钩子</td>\n            <td>post-commit</td>\n            <td> \\ </td>\n            <td> \\ </td>\n        </tr>\n        <tr>\n            <td>电子邮件工作流钩子</td>\n            <td>applypatch-msg</td>\n            <td>merge-filename</td>\n            <td>是</td>\n        </tr>\n        <tr>\n            <td>电子邮件工作流钩子</td>\n            <td>pre-applypatch</td>\n            <td> \\ </td>\n            <td>是</td>\n        </tr>\n        <tr>\n            <td>电子邮件工作流钩子</td>\n            <td>post-commit</td>\n            <td> \\ </td>\n            <td>否</td>\n        </tr>\n        <tr>\n            <td>其它客户端钩子</td>\n            <td>pre-rebase</td>\n            <td>| 是</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>其它客户端钩子</td>\n            <td>post-rewrite、post-checkout 和 post-merge</td>\n            <td>commandname</td>\n            <td>|</td>\n        </tr>\n        <tr>\n            <td>其它客户端钩子</td>\n            <td>pre-push</td>\n            <td>originbranhname &amp; head</td>\n            <td>是</td>\n        </tr>\n    </tbody>\n</table>","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"服务端","suffix":"","desc":"<table>\n<thead>\n<tr>\n<th>钩子名称</th>\n<th>接收参数</th>\n<th>可否终止操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pre-receive</td>\n<td>推送的引用</td>\n<td>是</td>\n</tr>\n<tr>\n<td>update</td>\n<td>引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值</td>\n<td>是</td>\n</tr>\n<tr>\n<td>post-receive</td>\n<td>同pre-receive</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"托管平台","barcolor":"","fold":false,"box":[{"title":"Github","fold":false,"list":[{"prefix":"","tag":"web hooks","suffix":"","desc":"","url":"https://developer.github.com/webhooks/","summary":"","reference":"","dot":""}]},{"title":"Gitlab","fold":false,"list":[{"prefix":"","tag":"build","suffix":"","desc":"","url":"https://about.gitlab.com/install/","summary":"","reference":"","dot":""}]}]},{"title":"Github Actions","barcolor":"","fold":false,"box":[{"title":"github actions","fold":false,"list":[{"prefix":"","tag":"actions","suffix":"","desc":"1. uses 和 run至少一个，且不能同时存在","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"rsync","suffix":"","desc":"adduser github_actions\nusermod -aG sudo github_actions\nhttps://github.com/appleboy/scp-action","url":"","summary":"","reference":"","dot":""}]}]}]}]}