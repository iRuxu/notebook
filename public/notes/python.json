{"version":1584861601294,"name":"python","data":[{"column":[{"title":"数据类型","barcolor":"","fold":false,"box":[{"title":"基本类型","fold":false,"list":[{"prefix":"","tag":"整型 ","suffix":"int","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"浮点型 ","suffix":"float","desc":"如 1.23、3E-2","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"复数 ","suffix":"complex","desc":"如 1 + 2j、 1.1 + 2.2j","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"布尔型 ","suffix":"bool","desc":"值：True,False","url":"","summary":"在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。","reference":"","dot":""},{"prefix":"","tag":"空值 ","suffix":"None","desc":"函数没有设置返回值时返回None","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"字符串 ","suffix":"str + * ''' r","desc":"不发生转义 `r\"\\n\"`\n模板字符串 `f'{var}'`\n多行字符串 `'''`\n多行语句可使用\\来串接，在(),[],{}中不需要","url":"","summary":"反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 如 r\"this is a line with \\n\" 则\\n会显示，并不是换行。\n单引号和双引号使用完全相同，使用三引号('''或\"\"\")可以指定一个多行字符串。\nPython 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。\n\n------\n\nPython 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠(\\)来实现多行语句，例如：\n```python\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n在 [], {}, 或 () 中的多行语句，不需要使用反斜杠(\\)，例如：\n```python\ntotal = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n```","reference":"","dot":""},{"prefix":"","tag":"列表 ","suffix":"list + *","desc":"多元素列表：`[1,'a']`\n空列表：`[]`","url":"","summary":"Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串","reference":"","dot":""},{"prefix":"","tag":"元组 ","suffix":"tuple + *","desc":"多元素元组：`(1,'a') `\n单元素元组：`(1,)`\n空元组：`()`\n元组与列表类似，但元组的元素不能修改，但可包含可变对象","url":"","summary":"元组（tuple）与列表类似，不同之处：\n1. 元组的元素不能修改和删除，但可以使用del语句来删除整个元组\n2. tuple的元素不可改变，但它可以包含可变的对象，比如list列表\n3. 当元组只有一个元素，需要在元素后添加逗号 tup2 = (20,) 否则非元组，而是单元素","reference":"","dot":""},{"prefix":"","tag":"集合 ","suffix":"set","desc":"多元素集合：`{'a','b'}` , `set(ite)`\n空集合：`set()`\n集合元素没有重复，元素类型必须为“不可变”元素(数值字符串元组等)","url":"","summary":"集合是一个无序不重复元素的序列。\n1.创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n2.使用set()时最多传入1个参数。","reference":"","dot":""},{"prefix":"","tag":"字典 ","suffix":"dict","desc":"多元素字典：`{ k : v ,..}`\n空字典：`{}` / `dict()`\n键必须是唯一的，键必须使用不可变类型","url":"","summary":"字符串、整型、浮点型和元组都可以作为dict的key。","reference":"","dot":""},{"prefix":"","tag":"枚举 ","suffix":"enum","desc":"```\nfrom enum import Enum\n@unique\nclass Weekday(Enum): \n    Sun = 0\n```\nWeekday.Sun.value | Weekday(0)\n既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。\n默认从1开始计数","url":"","summary":"","reference":"","dot":""}]},{"title":"类型检测","fold":false,"list":[{"prefix":"","tag":"type","suffix":"(var)","desc":"查询变量所指的对象类型\n`type(var) == str`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"isinstance","suffix":"(var,type..)","desc":"判断变量所指的对象类型（包含继承）\n```\nisinstance(a, int)\nisinstance(a, (list, tuple))\n```","url":"","summary":"是否为可迭代类型\n```\nfrom collections import Iterable\nisinstance(val,Iterable) \n```\n判断是否为迭代器\n```\nfrom collections import Iterator\nisinstance((x for x in range(10)), Iterator)\n```\n可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator\n生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator","reference":"","dot":""},{"prefix":"","tag":"isinstance","suffix":"(val,Iterable)","desc":"判断一个对象是否为可迭代对象\n`from collections import Iterable`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"callable","suffix":"(fn)","desc":"判断是否为函数","url":"","summary":"```\nimport types\ntype(fn) == fntype\n```\ntypes.FunctionType\nBuiltinFunctionType\ntypes.LambdaType\nGeneratorType","reference":"","dot":""}]},{"title":"类型转换/创建","fold":false,"list":[{"prefix":"","tag":"int","suffix":"(x[,base])","desc":"将一个字符串或数字转换为整型，base默认值为10","url":"","summary":"base指数据源的原始进制，转化之后总是显示为十进制","reference":"","dot":""},{"prefix":"","tag":"float","suffix":"(x)","desc":"将整数和字符串转换成浮点数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"complex","suffix":"(real[,imag])","desc":"创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数\n如果第一个参数为字符串，则不需要指定第二个参数","url":"","summary":"```python\n>>>complex(1, 2)\n(1 + 2j)\n\n>>> complex(1)    # 数字\n(1 + 0j)\n\n>>> complex(\"1\")  # 当做字符串处理\n(1 + 0j)\n\n# 注意：这个地方在\"+\"号两边不能有空格，也就是不能写成\"1 + 2j\"，应该是\"1+2j\"，否则会报错\n>>> complex(\"1+2j\")\n(1 + 2j)\n```","reference":"","dot":""},{"prefix":"","tag":"bool","suffix":"(x)","desc":"转换到布尔值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"str","suffix":"(x)","desc":"将对象 x 转换为字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"repr","suffix":"(x)","desc":"将对象转化为供解释器读取的形式","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"tuple","suffix":"(ite)","desc":"将序列/字典的key/可迭代对象转换为一个元组","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"list","suffix":"(ite)","desc":"将序列/字典的key/可迭代对象转换为一个列表","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"set","suffix":"(ite)","desc":"将序列/字典的key/可迭代对象转换为一个可变集合","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"frozenset","suffix":"（ite）","desc":"转换为不可变集合","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"dict","suffix":"(d)","desc":"创建字典\n`dict(key='val',..) `\n`dict([(key1,val2),(key2,val2)...])` 元组数组\n`dict(([key1,val2],[key2,val2]...))` 数组元组\n`dict(zip(['one', 'two', 'three'], [1, 2, 3]))`  映射函数方式来构造字典","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"object()","suffix":"","desc":"返回一个没有特征的新对象。\nobject 是所有类的基类。它具有所有 Python 类实例的通用方法。这个函数不接受任何实参。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"全局","barcolor":"","fold":false,"box":[{"title":"全局方法","fold":false,"list":[{"prefix":"","tag":"eval","suffix":"(str)","desc":"执行一个字符串表达式，并返回表达式的值。","url":"","summary":"eval(expression[, globals[, locals]])\nexpression -- 表达式。\nglobals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。\nlocals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。","reference":"","dot":""},{"prefix":"","tag":"help","suffix":"(fn)","desc":"可以在交互式命令行通过help(abs)查看abs函数的帮助信息","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"compile","suffix":"(str)","desc":"将一个字符串编译为字节代码","url":"","summary":"","reference":"参考资料|https://www.runoob.com/python/python-func-compile.html","dot":""}]}]}]},{"column":[{"title":"数值","barcolor":"","fold":false,"box":[{"title":"检测","fold":false,"list":[{"prefix":"","tag":"math.isnan","suffix":"(val)","desc":"将数字除以无穷大的结果是nan（不是数字）\nnan不等于任何值，甚至不等于任何值，因此请检查nan使用情况isnan()","url":"","summary":"","reference":"参考资料|https://pymotw.com/3/math/index.html","dot":""},{"prefix":"","tag":"math.isinf","suffix":"(val)","desc":"无限值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.isfinite","suffix":"(val)","desc":"当值为inf和nan时返回False\n其余返回True","url":"","summary":"","reference":"","dot":""}]},{"title":"转换","fold":false,"list":[{"prefix":"","tag":"hex","suffix":"(n)","desc":"将一个整数转变为一个前缀为“0x”的十六进制字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"oct","suffix":"(n)","desc":"将一个整数转变为一个前缀为“0o”的八进制字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"bin","suffix":"(n)","desc":"将一个整数转变为一个前缀为“0b”的二进制字符串","url":"","summary":"","reference":"","dot":""}]}]},{"title":"数学","barcolor":"","fold":false,"box":[{"title":"随机数","fold":false,"list":[{"prefix":"","tag":"range","suffix":"([start],stop,[step])","desc":"返回值：可迭代对象（类型是对象）\n而不是列表类型， 所以打印的时候不会打印列表。 list() 函数是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表。\n\n从指定范围内，按指定基数递增的集合中获取一个随机数 \nstart -- 指定范围内的开始值，包含在范围内，缺省为0。\nstop -- 指定范围内的结束值，不包含在范围内。\nstep -- 指定递增基数，缺省为1。","url":"","summary":"","reference":"参考资料|https://docs.python.org/zh-cn/3/library/random.html#module-random","dot":""},{"prefix":"","tag":"random.choice","suffix":"(seq)","desc":"返回值：非空序列 seq 中的一个随机元素。 \n如果 seq 为空，则引发 IndexError。\n比如random.choice(range(10))，从0到9中随机挑选一个整数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"random.random()","suffix":"","desc":"返回值：一个[0~1)浮点数\n返回[0.0, 1.0) 范围内的下一个随机浮点数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"random.randint","suffix":"(a,b)","desc":"返回值：随机整数N\nrandom.randrange(start, stop[, step]) 返回一个随机选择的元素","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"random.uniform","suffix":"(a,b)","desc":"返回值：随机浮点数\n当 a <= b 时 a <= N <= b ，当 b < a 时 b <= N <= a 。","url":"","summary":"","reference":"","dot":""}]},{"title":"常用方法","fold":false,"list":[{"prefix":"","tag":"max","suffix":"(ite)","desc":"返回可迭代对象中最大的元素","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"min","suffix":"(ite)","desc":"返回可迭代对象中最小的元素","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"abs","suffix":"(val)","desc":"math.fabs(val) 绝对值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.ceil","suffix":"(val)","desc":"在输入值之后依次生成最大的整数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.floor","suffix":"(val)","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"round","suffix":"(x,[n])","desc":"返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.trunc","suffix":"(val)","desc":"截断小数点后的数字，只保留构成值的整数部分的有效数字","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.modf","suffix":"(val)","desc":"接受一个浮点数，并返回一个包含输入值的小数和整数部分的元组。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"pow","suffix":"(val,n,[z])","desc":"返回val的n次方\n如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.sqrt","suffix":"(val)","desc":"返回x的平方根\nmath.isqrt(val) 返回非负整数n的整数平方根","url":"","summary":"","reference":"","dot":""}]},{"title":"计算方法","fold":false,"list":[{"prefix":"","tag":"math.gcd","suffix":"(x,y)","desc":"返回整数a和b的最大公约数\n至少有1这个公约数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"sum","suffix":"(ite,[start])","desc":"从 start 开始自左向右对 iterable 中的项求和并返回总计值。 start 默认为 0。 iterable 的项通常为数字，开始值则不允许为字符串。\nmath.fsum(ite) 返回迭代器中值的准确浮点和。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.factorial","suffix":"(val)","desc":"以整数形式返回x阶乘","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.prod","suffix":"(ite,*start=1)","desc":"计算可迭代输入中所有元素的乘积。默认启动的产品价值1。\n当iterable为空时，返回起始值。该函数专门用于数字值，并且可以拒绝非数字类型。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"divmod","suffix":"(x,y)","desc":"返回一个包含商和余数的元组(a // b, a % b)","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":true,"list":[{"prefix":"","tag":"数学常量","suffix":"","desc":"math.pi 圆周率\nmath.e 自然常数\nmath.nan 非数值\nmath.inf 无穷","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"对数指数","suffix":"","desc":"math.log(val)\t返回一个数的自然对数\nmath.log1p(val)\t返回一个数字加1后的自然对数 (底为 E), 既log(x+1).\nmath.log2(val)\t返回一个数以2位底的对数\nmath.log10(val)\t返回一个数以10位底的对数\nmath.exp(val)\t返回一个数以e位底的val次方\nmath.expm1(val)\t返回一个数以e位底的val次方-1","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"三角函数","suffix":"","desc":"math.cos(val)\t返回一个数的余弦。\nmath.cosh(val)\t返回一个数的双曲余弦。\nmath.acos(val)\t返回一个数的反余弦。\nmath.acosh(val)\t返回一个数的反双曲余弦。\n\nmath.sin(val)\t返回一个数的正弦。\nmath.sinh(val)\t返回一个数的双曲正弦。\nmath.asin(val)\t返回一个数的反正弦。\nmath.asinh(val)\t返回一个数的反双曲正弦。\n\nmath.tan(val)\t返回一个数的正切。\nmath.tanh(val)\t返回一个数的双曲正切。\nmath.atan(val)\t返回一个数的反正切。\nmath.atan2(val)\t返回两个变量 x 和 y 的反正切。\nmath.atanh(val)\t返回一个数的反双曲正切。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"几何","suffix":"","desc":"math.dist(p,q) 返回两个点p和q之间的欧几里得距离，每个点以坐标序列（或可迭代）给出。这两个点必须具有相同的尺寸。\nsqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))\n\nmath.hypot(坐标) 返回欧几里得范数。这是从原点到坐标给定点的矢量长度。```sqrt(sum(x**2 for x in coordinates))```\n对于二维点，这等效于使用勾股定理，计算直角三角形的斜边 。```(x, y)sqrt(x*x + y*y)```\n在3.8版中进行了更改：添加了对n维点的支持。以前，仅支持二维情况。\n\nmath.degrees(x) 将角度x从弧度转换为度。\nmath.radians(x) 将角度x从度转换为弧度。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"统计","suffix":"","desc":"<table class=\"docutils align-default\">\n<colgroup>\n    <col style=\"width: 34%\">\n    <col style=\"width: 66%\">\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.mean\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.mean()</span></code></a></p></td>\n<td><p>数据的算术平均数（“平均数”）。</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" title=\"statistics.fmean\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.fmean()</span></code></a></p></td>\n<td><p>快速的，浮点算数平均数。</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.geometric_mean\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.geometric_mean()</span></code></a></p></td>\n<td><p>数据的几何平均数</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" title=\"statistics.harmonic_mean\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.harmonic_mean()</span></code></a></p></td>\n<td><p>数据的调和均值</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.median\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.median()</span></code></a></p></td>\n<td><p>数据的中位数（中间值）</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" title=\"statistics.median_low\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.median_low()</span></code></a></p></td>\n<td><p>数据的低中位数</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.median_high\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.median_high()</span></code></a></p></td>\n<td><p>数据的高中位数</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" title=\"statistics.median_grouped\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.median_grouped()</span></code></a></p></td>\n<td><p>分组数据的中位数，即第50个百分点。</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.mode\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.mode()</span></code></a></p></td>\n<td><p>离散的或标称的数据的单模（最常见的值）。</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" title=\"statistics.multimode\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.multimode()</span></code></a></p></td>\n<td><p>离散的或标称的数据的模式列表（最常见的值）。</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.quantiles\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.quantiles()</span></code></a></p></td>\n<td><p>将数据以相等的概率分为多个间隔。</p></td>\n</tr>\n</tbody>\n</table>\n\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 34%\">\n<col style=\"width: 66%\">\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.pstdev\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.pstdev()</span></code></a></p></td>\n<td><p>数据的总体标准差</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" title=\"statistics.pvariance\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.pvariance()</span></code></a></p></td>\n<td><p>数据的总体方差</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" title=\"statistics.stdev\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.stdev()</span></code></a></p></td>\n<td><p>数据的样本标准差</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" title=\"statistics.variance\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">statistics.variance()</span></code></a></p></td>\n<td><p>数据的样本方差</p></td>\n</tr>\n</tbody>\n</table>","url":"https://docs.python.org/zh-cn/3.8/library/statistics.html","summary":"","reference":"","dot":""}]}]},{"title":"日期和时间","barcolor":"","fold":false,"box":[{"title":"创建","fold":false,"list":[{"prefix":"","tag":"datetime.now()","suffix":"","desc":"from datetime import datetime\n获取当前日期和时间（返回类型是datetime）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"datetime.fromtimestamp","suffix":"(timestamp)","desc":"根据timestamp创建datetime","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"datetime.strptime","suffix":"(str,format)","desc":"根据str创建为datetime\n```cday = datetime.strptime('2015-6-1 18:19:59', '%Y-%m-%d %H:%M:%S')```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"datetime","suffix":"(y,m,d,h,m,s)","desc":"指定某个日期和时间\n返回类型为datetime","url":"","summary":"","reference":"","dot":""}]},{"title":"时间戳","fold":false,"list":[{"prefix":"","tag":"time.time()","suffix":"","desc":"返回当前时间的时间戳","url":"","summary":"","reference":"","dot":""},{"prefix":"dt.","tag":"timestamp()","suffix":"","desc":"datetime -> timestamp\nPython的timestamp是一个浮点数。如果有小数位，小数位表示毫秒数。","url":"","summary":"timestamp的值与时区毫无关系，因为timestamp一旦确定，其UTC时间就确定了，转换到任意时区的时间也是完全确定的","reference":"","dot":""}]},{"title":"格式化","fold":false,"list":[{"prefix":"dt.","tag":"strftime","suffix":"(format)","desc":"datetime -> 格式化字符串\n```now.strftime('%a, %b %d %H:%M')```","url":"","summary":"%y 两位数的年份表示（00-99）\n%Y 四位数的年份表示（000-9999）\n%m 月份（01-12）\n%d 月内中的一天（0-31）\n%H 24小时制小时数（0-23）\n%I 12小时制小时数（01-12）\n%M 分钟数（00=59）\n%S 秒（00-59）\n%a 本地简化星期名称\n%A 本地完整星期名称\n%b 本地简化的月份名称\n%B 本地完整的月份名称\n%c 本地相应的日期表示和时间表示\n%j 年内的一天（001-366）\n%p 本地A.M.或P.M.的等价符\n%U 一年中的星期数（00-53）星期天为星期的开始\n%w 星期（0-6），星期天为星期的开始\n%W 一年中的星期数（00-53）星期一为星期的开始\n%x 本地相应的日期表示\n%X 本地相应的时间表示\n%Z 当前时区的名称\n%% %号本身","reference":"","dot":""},{"prefix":"dt.","tag":"date()","suffix":"","desc":"返回以2019-05-07格式的字符串","url":"","summary":"","reference":"","dot":""}]},{"title":"计算","fold":false,"list":[{"prefix":"dt +- ","tag":"timedelta","suffix":"(unit=val)","desc":"from datetime import datetime, timedelta\n```now + timedelta(hours=10)```\n计算前几天和后几天的时刻","url":"","summary":"","reference":"参考资料|https://docs.python.org/zh-cn/3/library/datetime.html","dot":""}]},{"title":"时区","fold":false,"list":[{"prefix":"","tag":"datetime.utcnow()","suffix":"","desc":"from datetime import datetime,timezone\n获取当前的UTC时间\n```utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)```\n替换为指定时区\n返回值：datetime对象","url":"","summary":"","reference":"","dot":""},{"prefix":"dt.","tag":"astimezone","suffix":"(timezone)","desc":"from datetime import datetime, timedelta, timezone\n```dt = utc_dt.astimezone(timezone(timedelta(hours=8)))```\n转换时区为北京时间","url":"","summary":"如果要存储datetime，最佳方法是将其转换为timestamp再存储，因为timestamp的值与时区完全无关。","reference":"","dot":""}]},{"title":"日历","fold":false,"list":[{"prefix":"","tag":"calendar.isleap","suffix":"(y)","desc":"是闰年返回 True，否则为 False","url":"","summary":"","reference":"参考资料|https://www.runoob.com/python3/python3-date-time.html","dot":""},{"prefix":"","tag":"calendar.monthrange","suffix":"(y,m)","desc":"返回两个整数。(2,31) \n该月第一天是星期几(0-6)，第二个是该月有几天。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"calendar.month","suffix":"(y,m)","desc":"import calendar\n输出日历","url":"","summary":"calendar.month(year,month,w=2,l=1) \n返回一个多行字符串格式的year年month月日历，两行标题，一周一行。 \n每日宽度间隔为w字符，l是每星期的行数。","reference":"","dot":""},{"prefix":"","tag":"calendar.calendar","suffix":"(y)","desc":"calendar.calendar(year,w=2,l=1,c=6)\n返回一个多行字符串格式的year年年历，3个月一行。\n每个月间隔距离c，每日宽度间隔为w字符，l是每星期行数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"calendar.TextCalendar()","suffix":"","desc":"生成文字日历\n```\nc = calendar.TextCalendar()\nc.formatmonth(2017, 7)\n```","url":"","summary":"默认按欧洲惯例从周一开始，如需指定为周日，设置参数calendar.SUNDAY","reference":"","dot":""},{"prefix":"","tag":"calendar.HTMLCalendar()","suffix":"","desc":"生成 HTML 日历\n```\nc = calendar.HTMLCalendar()\nc.formatmonth(2017, 7)\n```","url":"","summary":"","reference":"参考资料|https://docs.python.org/zh-cn/3/library/calendar.html#calendar.HTMLCalendar","dot":""}]}]}]},{"column":[{"title":"字符串","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"str.","tag":"center","suffix":"(len,var)","desc":"填充两侧，不对称时优先填充右侧，默认使用空白\nstr.ljust(len,val) 填充右侧（左对齐）\nstr.rjust(len,val) 填充左侧（右对齐）\nstr.zfill(len) 前面填充0（右对齐）","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"strip","suffix":"([val])","desc":"移除两边的空格或指定字符\nstr.lstrip([val]) 移除左侧\nstr.rstrip([val]) 移除右侧","url":"","summary":"","reference":"","dot":""}]},{"title":"转换","fold":false,"list":[{"prefix":"str.","tag":"upper()","suffix":"","desc":"转换字符串中的小写字母为大写","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"lower()","suffix":"","desc":"转换字符串中所有大写字符为小写","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"swapcase()","suffix":"","desc":"对字符串的大小写字母进行转换","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"capitalize()","suffix":"","desc":"首个字符大写，其余为小写","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"title()","suffix":"","desc":"所有单词的首个字母转化为大写，其余字母均为小写","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"expandtabs()","suffix":"","desc":"把字符串中的 tab 符号('\\t')转为空格，tab 符号('\\t')默认的空格数是 8\n可通过参数指定","url":"","summary":"","reference":"","dot":""},{"prefix":"str{n}.","tag":"format","suffix":"(val)","desc":"执行字符串格式化操作  \n```print (\"我叫 %s 今年 %d 岁!\" % ('小明', 10))```\nf'{var}' 模板字符串 ","url":"","summary":"python字符串格式化符号:\n<table class=\"reference\"><tbody><tr><th>符号</th><th>描述</th></tr><tr><td><font > %c</font></td><td><font >格式化字符及其ASCII码</font></td></tr><tr><td><font > %s</font></td><td><font >格式化字符串</font></td></tr><tr><td><font > %d</font></td><td><font >格式化整数</font></td></tr><tr><td><font > %u</font></td><td><font >格式化无符号整型</font></td></tr><tr><td><font > %o</font></td><td><font >格式化无符号八进制数</font></td></tr><tr><td><font > %x</font></td><td><font >格式化无符号十六进制数</font></td></tr><tr><td><font > %X</font></td><td><font >格式化无符号十六进制数（大写）</font></td></tr><tr><td><font > %f</font></td><td><font >格式化浮点数字，可指定小数点后的精度</font></td></tr><tr><td><font > %e</font></td><td><font >用科学计数法格式化浮点数</font></td></tr><tr><td><font > %E</font></td><td><font >作用同%e，用科学计数法格式化浮点数</font></td></tr><tr><td><font > %g</font></td><td><font >%f和%e的简写</font></td></tr><tr><td><font > %G</font></td><td><font >%f 和 %E 的简写</font></td></tr><tr><td><font > %p</font></td><td><font >用十六进制数格式化变量的地址</font></td></tr></tbody></table>\n格式化操作符辅助指令:\n<table class=\"reference\">\n<tbody><tr>\n<th>符号</th><th>功能</th>\n</tr>\n<tr><td>*</td><td>定义宽度或者小数点精度 </td></tr>\n<tr><td>-</td><td>用做左对齐 </td></tr>\n<tr><td>+</td><td>在正数前面显示加号( + ) </td></tr>\n<tr><td>&lt;sp&gt;</td><td>在正数前面显示空格 </td></tr>\n<tr><td>#</td><td> 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')</td></tr>\n<tr><td>0</td><td> 显示的数字前面填充'0'而不是默认的空格 </td></tr>\n<tr><td>%</td><td> '%%'输出一个单一的'%' </td></tr>\n<tr><td>(var)</td><td>映射变量(字典参数) </td></tr>\n<tr><td>m.n.</td><td>  m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr>\n</tbody></table>","reference":"参考资料|https://www.runoob.com/python3/python3-string.html","dot":""}]},{"title":"拼割","fold":false,"list":[{"prefix":"str.","tag":"split","suffix":"([val,max])","desc":"分割字符串为数组，默认val为所有空白符\n如果 num 有指定值，则仅截取 num+1 个子字符串，即切割max-1次，剩下仍作为整体放入数组","url":"","summary":"","reference":"","dot":""},{"prefix":"pattern.","tag":"split","suffix":"(str,[max])","desc":"通过正则来分割","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"splitlines()","suffix":"","desc":"按照行('\\r', '\\r\\n', \\n')分隔，返回一个包含各行作为元素的列表\n如果参数为 False，不包含换行符，如果为 True，则保留换行符。(即切割后的元素是否保留换行符字符本身）","url":"","summary":"","reference":"","dot":""},{"prefix":"val.","tag":"join","suffix":"(seq)","desc":"将序列中的元素以指定的字符连接生成一个新的字符串","url":"","summary":"","reference":"","dot":""}]},{"title":"查找","fold":false,"list":[{"prefix":"str.","tag":"find","suffix":"(val,[start,end))","desc":"返回值：索引 或 -1\nvar in str 字符串是否存在，返回True或False","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"rfind","suffix":"(val,[start,end))","desc":"从右侧开始查找","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"startswith","suffix":"(val,[start,end))","desc":"以指定字符开始","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"endswith","suffix":"(val,[start,end))","desc":"以指定的 suffix 结束返回 True，否则返回 False","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"count","suffix":"(val,[start,end))","desc":"统计val的次数\nstart = 0，end均为可选，左闭右开","url":"","summary":"","reference":"","dot":""}]},{"title":"匹配","fold":false,"list":[{"prefix":"str.","tag":"replace","suffix":"(old,new,[max])","desc":"替换字符，不超过 max 次。\n原字符串不变","url":"","summary":"","reference":"","dot":""},{"prefix":"pattern.","tag":"sub","suffix":"(val,str,[max])","desc":"val可以为字符串或者函数，当为函数时，函数的参数为match对象\nval也使用r（raw）字符串\n```pattern.subn(val,str,[max])``` 返回一个元组，第2个数值为替换的次数","url":"","summary":"```python\npattern.subn(func,'12abc34de56fg89')\n('4abc8de12fg18', 4)\n```","reference":"","dot":""},{"prefix":"str.","tag":"isalpha()","suffix":"","desc":"检测字符串是否只由字母或文字组成，非空\nstr.islower() 包含字母切均为小写，非空\nstr.isupper() 包含字母切均为大写，非空\nstr.istitle() 所有的单词拼写首字母是否为大写，且其他字母为小写\n","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"isdigit()","suffix":"","desc":"检测字符串是否只由数字组成，非空\nstr.isdecimal() 检查字符串是否只包含十进制字符，非空\nstr.isnumeric() 检测字符串是否只由数字组成，数字可以是： Unicode 数字，全角数字（双字节），罗马数字，汉字数字。","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"isalnum()","suffix":"","desc":"检测字符串是否由字母和数字组成，非空\n","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"isspace()","suffix":"","desc":"检测字符串是否只由空白字符组成","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"isascii()","suffix":"","desc":"为空或全部为ascii字符集字符","url":"","summary":"","reference":"","dot":""}]}]},{"title":"正则表达式","barcolor":"","fold":false,"box":[{"title":"特性","fold":false,"list":[{"prefix":"","tag":"r","suffix":"'regexp (?P<gname>exp)'","desc":"import re\n通过```(?P<gname>exp)```来具名分组，分组名为gname\n无需添加//","url":"","summary":"","reference":"re模块|https://docs.python.org/zh-cn/3/library/re.html\n参考资料|https://www.jianshu.com/p/147fab022566","dot":""},{"prefix":"","tag":"re.compile","suffix":"(regexp,flag)","desc":"编译正则表达式为一个正则表达式对象\n```pattern = re.compile(regexp,flag)```\nre.I\t使匹配对大小写不敏感\nre.L\t做本地化识别（locale-aware）匹配\nre.M\t多行匹配，影响 ^ 和 $\nre.S\t使 . 匹配包括换行在内的所有字符\nre.A\t仅限ascii字符\nre.U\t根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.\nre.X\t该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。\n**多个flag通过|并存**","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"re.$fn","suffix":"(regexp,str,flag)","desc":"非编译模式","url":"","summary":"","reference":"","dot":""}]},{"title":"方法","fold":false,"list":[{"prefix":"pattern.","tag":"search","suffix":"(str,[start,end])","desc":"返回值：Match对象 | None\n匹配整个字符串，返回第一个成功的匹配","url":"","summary":"","reference":"","dot":""},{"prefix":"pattern.","tag":"match","suffix":"(str,[start,end])","desc":"返回值：Match对象 | None\n只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败","url":"","summary":"","reference":"","dot":""},{"prefix":"pattern.","tag":"fullmatch","suffix":"(str,[start,end])","desc":"返回值：Match对象 | None\n整个字符串是否匹配此正则表达式","url":"","summary":"","reference":"","dot":""},{"prefix":"pattern.","tag":"findall","suffix":"(str,[start,end])","desc":"返回值：列表|元组列表\n如果不存在分组，返回字符串中模式的所有非重叠匹配项。\n如果存在单个分组，返回的是捕获组的内容列表。\n如果存在多个分组，返回的是捕获组元组构成的列表。","url":"","summary":"无分组时\n```python\npattern = re.compile(r'\\d+')\npattern.findall(\"a12b56c54d89\")\n['12', '56', '54', '89']\n```\n\n单个分组\n```python\npattern = re.compile(r'\\d*([0-9])')\npattern.findall(\"a124b567c54d892\") \n['4', '7', '4', '2']\n```\n\n多个分组\n```python\npattern = re.compile(r'\\d*([0-9])([0-9])')\npattern.findall(\"a124b567c54d892\")\n[('2', '4'), ('6', '7'), ('5', '4'), ('9', '2')]\n```","reference":"","dot":""},{"prefix":"pattern.","tag":"finditer","suffix":"(str,[start,end])","desc":"同findall，但返回的是迭代器","url":"","summary":"","reference":"","dot":""}]},{"title":"Match对象","fold":false,"list":[{"prefix":"match.","tag":"group","suffix":"[n]|(n|gname,..)","desc":"返回分组匹配的结果","url":"","summary":"","reference":"","dot":""},{"prefix":"match.","tag":"groups()","suffix":"","desc":"返回一个包含匹配所有子组的元组","url":"","summary":"","reference":"","dot":""},{"prefix":"match.","tag":"groupdict()","suffix":"","desc":"返回包含匹配的所有命名子组的字典的子集名称。","url":"","summary":"","reference":"","dot":""},{"prefix":"match.","tag":"start|end([group])","suffix":"","desc":"返回按组匹配的子串在原字符串中开始和结束的位置","url":"","summary":"","reference":"","dot":""},{"prefix":"match.","tag":"span([group])","suffix":"","desc":"对于匹配m,返回2元组(m.start(group),m.end(group))。\n默认0为匹配到的整个内容，1..为分组结果。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"编码","barcolor":"","fold":false,"box":[{"title":"字符","fold":false,"list":[{"prefix":"","tag":"ord","suffix":"(str)","desc":"返回代表它 Unicode 码点的整数。\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"chr","suffix":"(n)","desc":"返回值是当前整数对应的 ASCII 字符","url":"","summary":"","reference":"","dot":""},{"prefix":"str.","tag":"encode","suffix":"([encoding])","desc":"将Unicode表示的str编码为指定的bytes","url":"","summary":"```python\nx = 'ABC'.encode('ascii')\nb'ABC'\ny = '中文'.encode('utf-8')\nb'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n```","reference":"","dot":""},{"prefix":"bytes.","tag":"decode","suffix":"([encoding])","desc":"将字节流解码为字符串","url":"","summary":"","reference":"","dot":""}]},{"title":"Base64","fold":false,"list":[{"prefix":"","tag":"base64.urlsafe_b64encode","suffix":"(bytes)","desc":"import base64\n对字节进行Base64编码","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"base64.urlsafe_b64decode","suffix":"(bytes)","desc":"解码base64","url":"","summary":"","reference":"","dot":""}]},{"title":"HTML","fold":false,"list":[{"prefix":"","tag":"html.escape","suffix":"(str,true)","desc":"import html\n将html特殊标签转为html实体,true是否启用对引号的转换","url":"","summary":"将字符串 s 中的字符``&`` 、 < 和 > 转换为安全的HTML序列。 如果需要在 HTML 中显示可能包含此类字符的文本，请使用此选项。 如果可选的标志 quote 为真值，则字符 (\") 和 (') 也被转换；这有助于包含在由引号分隔的 HTML 属性中，如 <a href=\"...\">。","reference":"","dot":""},{"prefix":"","tag":"html.unescape","suffix":"(str)","desc":"将html实体转为html标签","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"序列","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"seq","tag":"[i]","suffix":"","desc":"访问/修改索引位置\n序列包括：字符串|列表|元组\n但字符串和元组不可修改","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"len","suffix":"(seq)","desc":"返回长度","url":"","summary":"","reference":"","dot":""},{"prefix":"seq.","tag":"count","suffix":"(val)","desc":"val出现的总次数","url":"","summary":"","reference":"","dot":""}]},{"title":"拼割","fold":false,"list":[{"prefix":"seq ","tag":"+ ","suffix":"seq","desc":"拼接","url":"","summary":"","reference":"","dot":""},{"prefix":"seq ","tag":"* n","suffix":"","desc":"重复n次","url":"","summary":"","reference":"","dot":""},{"prefix":"seq","tag":"[start:end:step]","suffix":"","desc":"切片\n左闭右开，步长默认为1","url":"","summary":"","reference":"","dot":""}]},{"title":"查找","fold":false,"list":[{"prefix":"val ","tag":"in | not in ","suffix":"seq","desc":"是否存在，返回布尔值","url":"","summary":"","reference":"","dot":""},{"prefix":"seq.","tag":"index","suffix":"(val,[start,end))","desc":"首次出现项的索引号","url":"","summary":"","reference":"","dot":""}]}]},{"title":"列表","barcolor":"","fold":false,"box":[{"title":"增加","fold":false,"list":[{"prefix":"list.","tag":"append","suffix":"(val)","desc":"参数：在末尾追加的值\n返回值：None\n原对象：修改","url":"","summary":"","reference":"","dot":""},{"prefix":"deque.","tag":"appendleft","suffix":"(val)","desc":"```from collections import deque```\n仅限访问时使用list，增删操作频繁时可用deque取代","url":"","summary":"","reference":"","dot":""},{"prefix":"list.","tag":"extend","suffix":"(ite)","desc":"参数：展开seq在末尾追加的值\n返回值：None\n原对象：修改","url":"","summary":"","reference":"","dot":""},{"prefix":"deque.","tag":"extendleft","suffix":"(ite)","desc":"将变量iterable中的元素添加至deque的左侧","url":"","summary":"","reference":"","dot":""},{"prefix":"list.","tag":"insert","suffix":"(i,val)","desc":"参数：在指定索引i插入值val\n返回值：None\n原对象：修改","url":"","summary":"","reference":"","dot":""}]},{"title":"删除","fold":false,"list":[{"prefix":"list.","tag":"pop","suffix":"([i])","desc":"参数：移除指定索引(默认为最后一个-1)的元素\n返回值：被移除的元素对象\n原对象：修改","url":"","summary":"","reference":"","dot":""},{"prefix":"deque.","tag":"popleft()","suffix":"","desc":"移除和返回deque中最左侧的元素，如果没有元素，将会报出IndexError；","url":"","summary":"","reference":"","dot":""},{"prefix":"list.","tag":"remove","suffix":"(val)","desc":"参数：移除第一个与val匹配的项\n返回值：None\n原对象：修改\n移除第一次出现的value，如果没有找到，报出ValueError；","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"del ","suffix":"list[i:j]","desc":"删除列表元素或区间","url":"","summary":"","reference":"","dot":""},{"prefix":"list.","tag":"clear()","suffix":"","desc":"参数：清空列表\n返回值：None\n原对象：修改","url":"","summary":"","reference":"","dot":""}]},{"title":"排序","fold":false,"list":[{"prefix":"list.","tag":"sort","suffix":"([key=fn,reverse=false])","desc":"参数：排序，默认升序\n返回值：None\n原对象：修改\nfn指定一个排序函数，返回一个具体的关联值。自动对比2个值的关系。","url":"","summary":"","reference":"","dot":""},{"prefix":"list.","tag":"reverse()","suffix":"","desc":"参数：反向排序\n返回值：None\n原对象：修改","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"list.","tag":"copy()","suffix":"","desc":"浅拷贝列表\n返回值：复制后的新列表\n原对象：不变","url":"","summary":"","reference":"","dot":""}]}]},{"title":"元组","barcolor":"","fold":false,"box":[{"title":"自定义元组","fold":false,"list":[{"prefix":"","tag":"namedtuple","suffix":"(name,[x,y..])","desc":"```python\nfrom collections import namedtuple\nPoint = namedtuple('Point',['x','y'])\nnt = Point(1,2)\nnt.x = 1\n```","url":"","summary":"","reference":"","dot":""}]}]},{"title":"数组","barcolor":"","fold":false,"box":[{"title":"Array","fold":false,"list":[{"prefix":"","tag":" array","suffix":"(type,seq)","desc":"高效的数值数组\n```\nfrom array import array\narray('l', [1, 2, 3, 4, 5])\n```","url":"https://docs.python.org/zh-cn/3/library/array.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"bytes","suffix":"(source,[encoding])","desc":"返回一个新的 bytes 对象，该对象是一个 0 <= x < 256 区间内的整数不可变序列。它是 bytearray 的不可变版本。","url":"","summary":"","reference":"参考资料|https://www.runoob.com/python3/python3-func-bytes.html","dot":""}]}]},{"title":"集合","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"","tag":"len","suffix":"(set)","desc":"返回集合中的元素数量","url":"","summary":"","reference":"","dot":""},{"prefix":"val ","tag":" in | not in ","suffix":"set","desc":"是否为集合中的成员","url":"","summary":"","reference":"","dot":""},{"prefix":"set.","tag":"copy()","suffix":"","desc":"返回原集合的浅拷贝","url":"","summary":"","reference":"","dot":""}]},{"title":"元素","fold":false,"list":[{"prefix":"set.","tag":"add","suffix":"(val)","desc":"为集合添加元素","url":"","summary":"","reference":"","dot":""},{"prefix":"set.","tag":"discard","suffix":"(val)","desc":"删除集合中指定的元素\n`set.remove(val)` 当移除不存在的元素时会报错","url":"","summary":"","reference":"","dot":""},{"prefix":"set.","tag":"pop()","suffix":"","desc":"从集合中移除并返回任意一个元素。 如果集合为空则会引发 KeyError","url":"","summary":"","reference":"","dot":""},{"prefix":"set.","tag":"clear()","suffix":"","desc":"移除集合中的所有元素","url":"","summary":"","reference":"","dot":""}]},{"title":"子集","fold":false,"list":[{"prefix":"set1 ","tag":"<= ","suffix":"set2","desc":"set1是否为set2的子集\n等同`set1.issubset(set2)`","url":"","summary":"","reference":"","dot":""},{"prefix":"set1 ","tag":"< ","suffix":"set2","desc":"集合是否为真子集","url":"","summary":"","reference":"","dot":""},{"prefix":"set1 ","tag":">= ","suffix":"set2","desc":"检测是否 other 中的每个元素都在集合之中。\n等同`set.issuperset(other)`","url":"","summary":"","reference":"","dot":""},{"prefix":"set1 ","tag":"> ","suffix":"set2","desc":"检测集合是否为 other 的真超集","url":"","summary":"","reference":"","dot":""}]},{"title":"并集","fold":false,"list":[{"prefix":"set1 ","tag":"| ","suffix":"set2","desc":"返回一个新并集\n等同 `union(set1,set2,..)` `set1.update(set2)`\n更新集合 `set |= other | ...` 添加来自 others 中的所有元素","url":"","summary":"","reference":"","dot":""}]},{"title":"交集","fold":false,"list":[{"prefix":"set1 ","tag":"& ","suffix":"set2","desc":"交集\n等同 `intersection(set1,set2,..)`\n更新集合 `set &= other & ...` 只保留其中在所有 others 中也存在的元素","url":"","summary":"","reference":"","dot":""},{"prefix":"set1.","tag":"isdisjoint","suffix":"(set2)","desc":"两个集合没有交集\n返回值：布尔","url":"","summary":"","reference":"","dot":""}]},{"title":"差集","fold":false,"list":[{"prefix":"set1 ","tag":"- ","suffix":"set2 ..","desc":"返回一个新集合，其中包含原集合中在 others 指定的其他集合中不存在的元素\n等同 `set1.difference(set2,..)`\n更新集合 `set -= other | ...` 移除其中也存在于 others 中的元素","url":"","summary":"","reference":"","dot":""},{"prefix":"set1 ","tag":"^ ","suffix":"set2","desc":"返回一个新集合，其中的元素或属于原集合或属于 other 指定的其他集合，但不能同时属于两者\n等同 `set1.symmetric_difference(set2)`\n更新集合 `set ^= other` 只保留存在于集合的一方而非共同存在的元素","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"字典","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"","tag":"len","suffix":"(dict)","desc":"计算字典元素个数，即键的总数","url":"","summary":"","reference":"","dot":""},{"prefix":"key ","tag":"in | not in ","suffix":"dict","desc":"是否存在key","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"copy()","suffix":"","desc":"浅拷贝","url":"","summary":"","reference":"","dot":""}]},{"title":"增加","fold":false,"list":[{"prefix":"dict","tag":"[key]","suffix":"","desc":"当key不存在时会报错\n","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"get","suffix":"(key,[default])","desc":"访问/修改指定键值，当没有时返回None","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"setdefault","suffix":"(key,[default])","desc":"如果键不已经存在于字典中，将会添加键并将值设为默认值。\n默认值为None","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"fromkeys","suffix":"(seq,[default])","desc":"以序列 seq 中元素做字典的键\ndefault 为字典所有键对应的初始值，默认为None","url":"","summary":"","reference":"","dot":""},{"prefix":"dict1.","tag":"update","suffix":"(dict2)","desc":"把字典2更新到字典1里\n返回值：无\n原对象：改变","url":"","summary":"","reference":"","dot":""}]},{"title":"删除","fold":false,"list":[{"prefix":"","tag":"del ","suffix":"dict[key]","desc":"移除指定key\n如果映射中不存在 key 则会引发 KeyError。","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"pop","suffix":"(key,[default])","desc":"删除字典给定键 key 所对应的值\n返回值为被删除的值\n如果没有 key，返回 default 值","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"popitem()","suffix":"","desc":"返回并删除字典中的最后一对键和值。\n如果字典已经为空，却调用了此方法，就报出KeyError异常。","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"clear()","suffix":"","desc":"清空","url":"","summary":"","reference":"","dot":""}]},{"title":"键值","fold":false,"list":[{"prefix":"dict.","tag":"keys()","suffix":"","desc":"返回键迭代器","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"values()","suffix":"","desc":"返回值迭代器","url":"","summary":"","reference":"","dot":""},{"prefix":"dict.","tag":"items()","suffix":"","desc":"返回可遍历的(键, 值) 元组数组\n`dict_items([('Age', 7), ('Name', 'Runoob')])`","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":true,"list":[{"prefix":"","tag":"Counter","suffix":"(ite)","desc":"Counter是一个简单的计数器，生成类似dict统计结构\n```from collections import Counter```\n```c = Counter('gallahad')```","url":"","summary":"手动统计\n```python\ncnt = Counter()\nfor word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:\n    cnt[word] += 1\n```","reference":"","dot":""},{"prefix":"","tag":"defaultdict","suffix":"(lambda: 'N/A')","desc":"使用dict时，如果引用的Key不存在，就会抛出KeyError。\n如果希望key不存在时，返回一个默认值，就可以用defaultdict\n```\nfrom collections import defaultdict\ndd = defaultdict(lambda: 'N/A')\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"OrderedDict","suffix":"(d)","desc":"使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序。\nOrderedDict的Key会按照插入的顺序排列进行迭代\n```\nfrom collections import OrderedDict\nod = OrderedDict([('a', 1), ('b', 2), ('c', 3)]) \n```","url":"","summary":"","reference":"","dot":""}]}]},{"title":"JSON","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"","tag":"json.dumps","suffix":"(data)","desc":"```import json```\n对数据进行编码","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"json.loads","suffix":"(json)","desc":"对数据进行解码","url":"","summary":"","reference":"异常处理|https://ixyzero.com/blog/archives/3923.html","dot":""}]}]}]},{"column":[{"title":"函数","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"","tag":"def ","suffix":"name(arg):","desc":"定义函数\nfn.\\__name\\__ 函数的名字","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"lambda ","suffix":"arg:","desc":"匿名函数 `lambda x: x * x`\n等同\n```python\ndef f(x):\n    return x * x\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"return ","suffix":"val,..","desc":"函数可以返回多个值，本质是返回一个元组","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"@decorator","suffix":"","desc":"给函数添加一个装饰器","url":"","summary":"定义装饰器函数时，引入`import functools`\n```\ndef (fn):\n    @functools.wraps(fn)\n    def wrap(*args,**kwargs):\n        \n        return fn(*args,**kwargs)\n    return wrap\n```\n带参数\n```\ndef (arg):\n    def decorator(fn):\n        @functools.wraps(fn)\n        def wrap(*args,**kwargs):\n            \n            return fn(*args,**kwargs)\n        return wrap\n    return decorator\n```","reference":"参考资料|https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584","dot":""}]},{"title":"参数","fold":false,"list":[{"prefix":"传递方式","tag":" ","suffix":"","desc":"# 不可变类型：**传值传递**\n如整数、字符串、元组。\n在函数内部，参数值是原始值的拷贝，无论怎么修改，都不会影响到原始值。\n\n# 引用类型：**传址传递**\n如列表，字典。\n拷贝的是指针，如修改原数据属性会改变原数据，如替换整个目标则不修改原数据，此外始终不改变原指针的指向。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"arg=default","suffix":"","desc":"*默认参数* `def(arg=default)`\n当使用默认参数时，其必须指向不变对象","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"key=val","suffix":"","desc":"# 命名关键字参数\n*声明* `def(arg,*,key1,key2)`\n*调用* `fn(key=val)`\n使用关键字参数允许函数调用时参数的顺序与声明时不一致\n和关键字参数\\*\\*kw不同，命名关键字参数需要一个特殊分隔符\\*，\\*后面的参数被视为命名关键字参数，**命名关键字参数必须传入参数名进行调用**。\n如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"*args","suffix":"","desc":"# 不定长参数\n*声明* `def fn(arg,*more)`\n*调用* `fn(arg,*list)`\n将列表|元组解构成参数序列以tuple的形式传入（类似js的...）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"**kw","suffix":"","desc":"# 关键字参数\n*声明* `def fn(arg,**kw)`\n*调用* `fn(arg,**dict)`\n解构一个dict转换为关键字参数传进去","url":"","summary":"","reference":"","dot":""}]}]},{"title":"Iterator","barcolor":"","fold":false,"box":[{"title":"Iterable","fold":false,"list":[{"prefix":"","tag":"iter","suffix":"(ite)","desc":"把Iterable变成Iterator\n**对dict单排序操作的是key**","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"enumerate","suffix":"(ite,[start])","desc":"将一个可遍历的数据对象组合为一个索引序列，同时列出数据下标和成员。\n返回 enumerate(枚举) 对象。","url":"","summary":"","reference":"","dot":""}]},{"title":"遍历","fold":false,"list":[{"prefix":"","tag":"for o in ","suffix":"ite","desc":"遍历可迭代对象的一个或多个值\ndict默认遍历key","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"map","suffix":"(fn,ite,..)","desc":"将传入的函数依次作用到一个或多个序列的每个元素\n返回：Iterator\n回调返回：新值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"filter","suffix":"(fn,ite)","desc":"把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素\n返回：Iterator\n回调返回：True/False","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"reduce","suffix":"(fn,ite,[init])","desc":"把结果继续和序列的下一个元素做累积计算\n返回：最终值\n回调返回：中间值；回调参数：x,y","url":"","summary":"","reference":"","dot":""}]},{"title":"排序","fold":false,"list":[{"prefix":"","tag":"reversed","suffix":"(ite)","desc":"返回：一个反转的迭代器\n可以是 tuple, string, list 或 range","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"sorted","suffix":"(ite,key)","desc":"返回值：列表\n*key*\n指定带有单个参数的函数，用于从 iterable 的每个元素中提取用于比较的键 (例如 key=str.lower)。 默认值为 None (直接比较元素)\n*reverse*\n为一个布尔值。 如果设为 True，则每个列表元素将按反向顺序比较进行排序。","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"","tag":"all","suffix":"(ite)","desc":"判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。\n元素除了是 0、空、None、False 外都算 True。","url":"","summary":"","reference":"参考资料|https://www.runoob.com/python/python-func-all.html","dot":""},{"prefix":"","tag":"any","suffix":"(ite)","desc":"判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True。\n元素除了是 0、空、FALSE 外都算 TRUE。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"zip","suffix":"(ite,..)","desc":"聚合多个迭代器对象中的元素\n返回：Iterator \n相同索引位置的元素构成一个元组","url":"","summary":"","reference":"","dot":""}]},{"title":"Generator","fold":false,"list":[{"prefix":"[","tag":"oexp for o in ite","suffix":"]","desc":"列表生成式 \n映射生成 `[x * x for x in range(1, 11)]`\n条件判断 `[x * x for x in range(1, 11) if x % 2 == 0]`\n双重映射 `[m + n for m in 'ABC' for n in 'XYZ']`","url":"","summary":"","reference":"","dot":""},{"prefix":"(","tag":"oexp for o in ite","suffix":")","desc":"生成器\ngenerator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"next","suffix":"(itor)","desc":"每调用一次，获得迭代器的下一个返回值\n直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误\n基本上永远不会调用next()，而是通过for循环来迭代它，并且不需要关心StopIteration的错误","url":"","summary":"迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。","reference":"","dot":""},{"prefix":"","tag":"yield","suffix":"(val)","desc":"在 Python 中，使用了 yield 的函数被称为生成器（generator）。\n\n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。\n\n在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。\n\n调用一个生成器函数，返回的是一个迭代器对象。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"异步","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"","tag":"async def ","suffix":"name(arg):","desc":"直接调用异步函数不会返回结果，而是返回一个coroutine对象\nasync 返回的 coroutine object 并不会立即执行，只有在asyncio.create_task(exec()) 创建成 Task 时才立即执行\n```python\nimport asyncio\nasyncio.create_task(sub())\nasyncio.run(fn())\n```","url":"","summary":"","reference":"参考资料|https://zhuanlan.zhihu.com/p/59621713","dot":""},{"prefix":"","tag":"await ","suffix":"exp","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"时间","fold":false,"list":[{"prefix":"","tag":"time.sleep","suffix":"(n)","desc":"import time\n推迟调用线程的运行，单位秒","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"面向对象","barcolor":"","fold":false,"box":[{"title":"类","fold":false,"list":[{"prefix":"","tag":"class ","suffix":"Name(object)","desc":"定义类\n```\nclass Student(object):\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__init__","suffix":"(self,args)","desc":"初始化函数\n`__del__` 析构函数，释放对象时使用","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"self","suffix":"","desc":"代表创建的实例","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":" ","suffix":"prop|fn(args)","desc":"类的公开属性和方法\n但所有实例也可以访问","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__","suffix":"prop|fn(args)","desc":"实例|类的私有属性和方法","url":"","summary":"","reference":"","dot":""}]},{"title":"继承","fold":false,"list":[{"prefix":"","tag":"class ","suffix":"Name(Parent,..)","desc":"继承与多重继承","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"super","suffix":"","desc":"`super().xxx` 调用父类方法，但此事调用时self指向当前实例","url":"","summary":"","reference":"参考资料|https://www.runoob.com/python/python-func-super.html","dot":""},{"prefix":"","tag":"issubclass","suffix":"(child,parent)","desc":"1.如果 class 是 classinfo 的子类（直接、间接或 虚拟 的），则返回 true。\n2.classinfo 可以是类对象的元组，此时 classinfo 中的每个元素都会被检查。满足其中一个则返回true。","url":"","summary":"","reference":"","dot":""}]},{"title":"实例","fold":false,"list":[{"prefix":"","tag":"Name","suffix":"(arg..)","desc":"创建实例","url":"","summary":"","reference":"","dot":""},{"prefix":"obj.","tag":"prop|fn","suffix":"","desc":"访问和设置对象的属性|方法","url":"","summary":"","reference":"","dot":""}]},{"title":"属性查询","fold":false,"list":[{"prefix":"","tag":"dir","suffix":"(obj)","desc":"获得一个对象的所有属性和方法\n返回值：字符串列表\n不带参数时，返回当前范围内的变量、方法和定义的类型列表；\n带参数时，返回参数的属性、方法列表。\n如果参数包含方法__dir__()，该方法将被调用。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"vars","suffix":"(obj)","desc":"返回对象object的属性和属性值的字典对象","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"hasattr","suffix":"(obj,prop)","desc":"是否存在指定属性或方法\n返回值：布尔","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"getattr","suffix":"(obj,prop,default)","desc":"获取对象属性或方法\n`getattr(obj, 'z', 404)`\n如果试图获取不存在的属性，会抛出AttributeError的错误，可以传入一个default参数，如果属性不存在，就返回默认值","url":"","summary":"","reference":"","dot":""}]},{"title":"属性设置","fold":false,"list":[{"prefix":"","tag":"setattr","suffix":"(obj,prop,val)","desc":"设置对象属性或方法","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"delattr","suffix":"(obj,prop)","desc":"删除对象属性","url":"","summary":"","reference":"","dot":""},{"prefix":"obj.fn = ","tag":"MethodType","suffix":"(fn,obj)","desc":"动态给对象绑定方法（需要对self进行操作时）\n```python\nfrom types import MethodType\ndef fn(self,args)\nobj.fn = MethodType(fn,obj)\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"Name.fn","suffix":" = fn","desc":"也可以动态给类绑定方法，所有实例均可调用","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__slots__ ","suffix":"= tulple","desc":"限制实例可添加的属性\n`__slots__ = ('name', 'age')` 用tuple定义允许绑定的属性名称\n仅对当前类实例起作用，对继承的子类是不起作用的","url":"","summary":"","reference":"","dot":""}]},{"title":"装饰器","fold":false,"list":[{"prefix":"","tag":"@property","suffix":"","desc":"把一个getter方法变成属性","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"@score.setter","suffix":"","desc":"把一个setter方法变成属性赋值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"@score.deleter","suffix":"","desc":"把一个方法变成属性删除","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"@staticmethod","suffix":"","desc":"返回函数的静态方法","url":"","summary":"","reference":"","dot":""}]},{"title":"特殊方法","fold":false,"list":[{"prefix":"","tag":"__str__","suffix":"","desc":"`__str__` 返回用户看到的字符串\n`__repr__` 返回程序开发者看到的字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__len__","suffix":"","desc":"获得长度","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__iter|next__","suffix":"","desc":"如果一个类实例想被用于for ... in循环，类似list或tuple那样，就必须实现一个`__iter__()`方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的`__next__()`方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。","url":"","summary":"```\nclass Fib(object):\n    def __init__(self):\n        self.a, self.b = 0, 1 # 初始化两个计数器a，b\n\n    def __iter__(self):\n        return self # 实例本身就是迭代对象，故返回自己\n\n    def __next__(self):\n        self.a, self.b = self.b, self.a + self.b # 计算下一个值\n        if self.a > 100000: # 退出循环的条件\n            raise StopIteration()\n        return self.a # 返回下一个值\n```","reference":"","dot":""},{"prefix":"","tag":"__getitem__","suffix":"(self,n)","desc":"`__getitem__` 按照索引获取值\n`__setitem__` 按照索引赋值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__getattr__","suffix":"(self,attr)","desc":"在没有找到属性的情况下尝试","url":"","summary":"```python\nclass Chain(object):\n\n    def __init__(self, path=''):\n        self._path = path\n\n    def __getattr__(self, path):\n        return Chain('%s/%s' % (self._path, path))\n\n    def __str__(self):\n        return self._path\n\n    __repr__ = __str__\n```\n链式调用\n```python\nChain().status.user.timeline.list\n'/status/user/timeline/list'\n```","reference":"","dot":""},{"prefix":"","tag":"__call__","suffix":"","desc":"任何类，只需要定义一个`__call__()`方法，就可以直接对实例进行调用。","url":"","summary":"```\nclass Student(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self):\n        print('My name is %s.' % self.name)\n```\n实例调用\n```\ns = Student('Michael')\ns() # self参数不要传入\nMy name is Michael.\n```","reference":"","dot":""},{"prefix":"","tag":"__add__","suffix":"","desc":"```\n__add__: 加运算\n__sub__: 减运算\n__mul__: 乘运算\n__truediv__: 除运算\n__mod__: 求余运算\n__pow__: 乘方\n__cmp__: 比较运算\n```","url":"","summary":"","reference":"参考资料|https://www.runoob.com/python3/python3-class.html","dot":""}]},{"title":"寻址","fold":false,"list":[{"prefix":"","tag":"id","suffix":"(o)","desc":"函数用于获取对象内存地址","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"hash","suffix":"(o)","desc":"返回对象的哈希值","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"错误异常","barcolor":"","fold":false,"box":[{"title":"异常类","fold":false,"list":[{"prefix":"","tag":"BaseException","suffix":"","desc":"所有的错误类型都继承自BaseException，所以在使用except时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”","url":"","summary":"","reference":"参考资料|https://docs.python.org/3/library/exceptions.html#exception-hierarchy","dot":""}]},{"title":"自定义错误","fold":false,"list":[{"prefix":"","tag":"raise ","suffix":"err","desc":"抛出一个错误的实例","url":"","summary":"","reference":"","dot":""}]},{"title":"捕获错误","fold":false,"list":[{"prefix":"","tag":"with","suffix":"","desc":"Python 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。","url":"https://www.runoob.com/python3/python-with.html","summary":"# with\n```\nwith open('./test_runoob.txt', 'w') as file:\n    file.write('hello world !')\n```\n# try catch\n```\nfile = open('./test_runoob.txt', 'w')\ntry:\n    file.write('hello world')\nfinally:\n    file.close()\n```\n使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。","reference":"参考文档|https://www.runoob.com/python3/python-with.html","dot":""},{"prefix":"","tag":"try..except..else..finally..","suffix":"","desc":"```python\ntry:\n.. 运行代码\nexcept ValueError as e:\n.. 错误处理\nelse:\n.. 正确处理\nfinally:\n.. 总是执行\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"日志","fold":false,"list":[{"prefix":"logging.","tag":"error","suffix":"(msg)","desc":"日志格式:日志级别:Logger实例名称:日志消息内容\nimport logging\nlogging.debug('debug message')\nlogging.info('info message')\nlogging.warn('warn message')\nlogging.error('error message')\nlogging.critical('critical message') ","url":"","summary":"","reference":"参考资料|https://www.jianshu.com/p/feb86c06c4f4","dot":""},{"prefix":"logging.","tag":"basicConfig","suffix":"(filename='logger.log', level=logging.INFO)","desc":"默认情况下，logging模块将日志打印到屏幕上(stdout)，日志级别为WARNING(即只有日志级别高于WARNING的日志信息才会输出)","url":"","summary":"<table>\n<thead>\n<tr>\n<th>级别</th>\n<th style=\"text-align:center\">何时使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEBUG</td>\n<td style=\"text-align:center\">详细信息，典型地调试问题时会感兴趣。</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td style=\"text-align:center\">证明事情按预期工作。</td>\n</tr>\n<tr>\n<td>WARNING</td>\n<td style=\"text-align:center\">表明发生了一些意外，或者不久的将来会发生问题（如‘磁盘满了’）。软件还是在正常工作。</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td style=\"text-align:center\">由于更严重的问题，软件已不能执行一些功能了。</td>\n</tr>\n<tr>\n<td>CRITICAL</td>\n<td style=\"text-align:center\">严重错误，表明软件已不能继续运行了。</td>\n</tr>\n</tbody>\n</table>","reference":"","dot":""},{"prefix":"logging.","tag":"getLogger","suffix":"(logger_name)","desc":"logger 记录器，暴露了应用程序代码能直接使用的接口。\n`logger.setLevel(logging.ERROR)` # 设置日志级别为ERROR，即只有日志级别大于等于ERROR的日志才会输出\n`logger.addHandler(handler_name)` # 为Logger实例增加一个处理器\n`logger.removeHandler(handler_name)` # 为Logger实例删除一个处理器","url":"","summary":"Logger是一个树形层级结构，在使用接口debug，info，warn，error，critical之前必须创建Logger实例，即创建一个记录器，如果没有显式的进行创建，则默认创建一个root logger，并应用默认的日志级别(WARN)，处理器Handler(StreamHandler，即将日志信息打印输出在标准输出上)，和格式化器Formatter(默认的格式即为第一个简单使用程序中输出的格式)。","reference":"","dot":""},{"prefix":"logging.","tag":"FileHandler","suffix":"(filename, mode='a', encoding=None, delay=False)","desc":"handler处理器，将（记录器产生的）日志记录发送至合适的目的地。\n`ch.setLevel(logging.WARN)` # 指定日志级别，低于WARN级别的日志将被忽略\n`ch.setFormatter(formatter_name)` # 设置一个格式化器formatter\n`ch.addFilter(filter_name)` # 增加一个过滤器，可以增加多个\n`ch.removeFilter(filter_name)` # 删除一个过滤器","url":"","summary":"Handler处理器类型有很多种，比较常用的有三个，StreamHandler，FileHandler，NullHandler。","reference":"","dot":""},{"prefix":"logging.","tag":"Filter","suffix":"(name='')","desc":"filter过滤器，提供了更好的粒度控制，它可以决定输出哪些日志记录。","url":"","summary":"","reference":"","dot":""},{"prefix":"logging.","tag":"Formatter","suffix":"(fmt=None, datefmt=None)","desc":"formatter格式化器，指明了最终输出中日志记录的布局\n","url":"","summary":"使用Formatter对象设置日志信息最后的规则、结构和内容，默认的时间格式为%Y-%m-%d %H:%M:%S。\n其中，fmt是消息的格式化字符串，datefmt是日期字符串。如果不指明fmt，将使用'%(message)s'。如果不指明datefmt，将使用ISO8601日期格式。","reference":"","dot":""}]}]},{"title":"调试测试","barcolor":"","fold":false,"box":[{"title":"断言","fold":false,"list":[{"prefix":"","tag":"assert ","suffix":"exp,'msg'","desc":"如果断言失败，assert语句本身就会抛出AssertionError","url":"","summary":"启动Python解释器时可以用-O参数来关闭assert\n关闭后，你可以把所有的assert语句当成pass来看","reference":"参考资料|https://www.runoob.com/python3/python3-assert.html","dot":""}]},{"title":"打印","fold":false,"list":[{"prefix":"","tag":"print","suffix":"(val,..)","desc":"print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=\"\"","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"模块","barcolor":"","fold":false,"box":[{"title":"导入","fold":false,"list":[{"prefix":"","tag":"import ","suffix":"file,..","desc":"导入整个模块\n内置模块 > 相对目录下.py文件\n导入模块的全部标识符，需以file.name访问","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"from file import ","suffix":"name|*","desc":"导入指定功能或全部\n则可直接使用对应标识符名name作为名称\ndir(mod) 可以找到模块内定义的所有名称，以一个字符串列表的形式返回:","url":"","summary":"","reference":"","dot":""}]},{"title":"杂项","fold":false,"list":[{"prefix":"init","tag":" ","suffix":"","desc":"```\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n```\n\n' module desc '\n任何模块代码的第一个字符串都被视为模块的文档注释","url":"","summary":"","reference":"","dot":""},{"prefix":"test","tag":" ","suffix":"","desc":"```python\ndef test():\n    pass\nif __name__=='__main__':\n    test()\n```\n当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"包","barcolor":"","fold":false,"box":[{"title":"导入导出","fold":false,"list":[{"prefix":"","tag":"__init.py__","suffix":"","desc":"目录包含一个叫做 \\_\\_init\\_\\_.py 的文件才会被认作是一个包\n包下面有若干模块`import pkg.file`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__all__","suffix":"","desc":"导入语句遵循如下规则：如果包定义文件 \\_\\_init\\_\\_.py 存在一个叫做 \\_\\_all\\_\\_ 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。\n`__all__ = [\"mod1\", \"mod2\"..]`\n以*导入时,可用的命名为模块名,相关方法仍需以mod.x访问","url":"","summary":"","reference":"","dot":""}]},{"title":"虚拟环境","fold":false,"list":[{"prefix":"","tag":"python -m venv","suffix":" $name","desc":"创建虚拟环境 `python -m venv name`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"source ","suffix":"$name/bin/activate","desc":"激活虚拟环境（venv换成实际的虚拟环境名）\n\nwindows\n```\nvenv\\Scripts\\activate.bat\n```\n\nunix\n`source venv/bin/activate` 或 `. venv/bin/activate`\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"echo $VIRTUAL_ENV","suffix":"","desc":"`echo $VIRTUAL_ENV` 查看是否激活","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"pip freeze --local","suffix":"","desc":"生成虚拟环境中的依赖\npip freeze --local > requirements.txt 本地所有的包（包含系统环境）\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"deactivate","suffix":"","desc":"退出虚拟环境 `deactivate`","url":"","summary":"","reference":"","dot":""}]},{"title":"安装包","fold":false,"list":[{"prefix":"","tag":"pip.conf","suffix":"","desc":"设置镜像\n# Linux\n找到下列文件 `~/.pip/pip.conf`\n# Windows\n打开`%appdata%`(C/user/AppData/Roaming),添加pip文件夹,并在其内添加`pip.ini`文件\n# 修改配置\n```\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```","url":"","summary":"查看镜像\n```pip3 config list```","reference":"参考资料|https://developer.aliyun.com/mirror/pypi","dot":""},{"prefix":"pip ","tag":"install ","suffix":"pkg","desc":"pip install SomePackage              # 最新版本\npip install SomePackage==1.0.4       # 指定版本\npip install 'SomePackage>=1.0.4'     # 最小版本","url":"","summary":"","reference":"","dot":""},{"prefix":"pip install pkg ","tag":"-i ","suffix":"registry","desc":"镜像地址\n`pip3 install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"requirements.txt","suffix":"","desc":"`pip install -r requirements.txt` 安装依赖文件中的包\n`pip install -r requirements.txt -t . ` 安装依赖文件中的包（安装到指定路径）\n`pip freeze > requirements.txt` 将当前项目中依赖的包生成包文件","url":"","summary":"pip freeze 命令会将当前 Python 环境中安装的所有包及其版本号输出到控制台。例如，如果您在虚拟环境中安装了 Flask 包和其它一些包。但它不会检查您的虚拟环境是否有任何未安装的依赖项，也不会升级已安装的包。","reference":"","dot":""},{"prefix":"","tag":"pipreqs","suffix":"","desc":"`pip install pipreqs`\n`pipreqs .` 只生成本地的","url":"","summary":"windows\n1. cmd运行`set PYTHONIOENCODING=utf-8` \n2. 执行`pipreqs . --encoding=utf-8`","reference":"","dot":""},{"prefix":"","tag":"pip list","suffix":" | grep pkg","desc":"检查特定包是否已经安装 `pip list | grep package_name`\n检查指定版本的包是否已经安装`pip freeze | grep package_name==version`\n\n","url":"","summary":"","reference":"","dot":""}]},{"title":"更新包","fold":false,"list":[{"prefix":"pip install ","tag":"--upgrade ","suffix":"pkg","desc":"升级包","url":"","summary":"","reference":"","dot":""},{"prefix":"pip ","tag":"uninstall ","suffix":"pkg","desc":"卸载包","url":"","summary":"","reference":"","dot":""}]},{"title":"发布包","fold":false,"list":[{"prefix":"pip + setuptools + wheel + twine","tag":" ","suffix":"","desc":"更新pip,setuptools和wheel `python -m pip install --upgrade pip setuptools wheel`\n安装twine `pip install twine`","url":"","summary":"","reference":"参考资料|https://juejin.im/post/5c90e2845188252d9714305c","dot":""},{"prefix":"","tag":"python setup.py sdist","suffix":"","desc":"打包包 `python setup.py sdist`\n ","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"python -m twine upload dist/*","suffix":"","desc":"发布包 `python -m twine upload dist/*`","url":"","summary":"","reference":"参考资料|https://juejin.im/post/5c90e2845188252d9714305c","dot":""}]}]},{"title":"部署","barcolor":"","fold":false,"box":[{"title":"deploy","fold":false,"list":[{"prefix":"","tag":"supervisor","suffix":"","desc":"1. `pip install supervisor` 安装\n2. `echo_supervisord_conf > /etc/supervisor/supervisord.conf` 创建配置文件\n3. `supervisord -c /etc/supervisord.conf` 启动服务\n4. `supervisorctl start all` 启动项目","url":"","summary":"## 常用命令\nsupervisorctl reread：重启Supervisor服务(更新配置后，必须先重启生效)\nsupervisorctl status：查看所有进程的状态\nsupervisorctl stop es：停止es\nsupervisorctl start es：启动es\nsupervisorctl restart es: 重启es\nsupervisorctl update ：配置文件修改后可以使用该命令加载新的配置\nsupervisorctl reload: 重新启动配置中的所有程序\n\n## 配置\n```\n;为了方便管理，增加一个tornado组\n[group:projects]\nprograms=project-1,project-2,project-3\n\n;分别定义三个project的进程配置\n[program:project-1]\ndirectory=/usr/local/1/target/    ;工作目录,jar包路径\ncommand=java -jar 1-0.0.1-SNAPSHOT.jar  ; 程序启动命令\nautostart=true       ; 在supervisord启动的时候也自动启动\nstartsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒\nautorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启\nstartretries=3       ; 启动失败自动重试次数，默认是3\nstopsignal=QUIT  ;终止进程命令\nuser=root         ; 用哪个用户启动进程，默认是root\npriority=999         ; 进程启动优先级，默认999，值小的优先启动\nredirect_stderr=true ; 把stderr重定向到stdout，默认false\nstdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB\nstdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/tmp/1.log\nstopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程\nkillasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程\n\n[program:project-2]\ndirectory=/usr/local/2/target/    ;工作目录,jar包路径\ncommand=java -jar 2-0.0.1-SNAPSHOT.jar  ; 程序启动命令\nautostart=true       ; 在supervisord启动的时候也自动启动\nstartsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒\nautorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启\nstartretries=3       ; 启动失败自动重试次数，默认是3\nstopsignal=QUIT  ;终止进程命令\nuser=root         ; 用哪个用户启动进程，默认是root\npriority=999         ; 进程启动优先级，默认999，值小的优先启动\nredirect_stderr=true ; 把stderr重定向到stdout，默认false\nstdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB\nstdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/tmp/2.log\nstopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程\nkillasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程\n\n[program:project-3]\ndirectory=/usr/local/3/target/    ;工作目录,jar包路径\ncommand=java -jar 3-0.0.1-SNAPSHOT.jar  ; 程序启动命令\nautostart=true       ; 在supervisord启动的时候也自动启动\nstartsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒\nautorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启\nstartretries=3       ; 启动失败自动重试次数，默认是3\nstopsignal=QUIT  ;终止进程命令\nuser=root         ; 用哪个用户启动进程，默认是root\npriority=999         ; 进程启动优先级，默认999，值小的优先启动\nredirect_stderr=true ; 把stderr重定向到stdout，默认false\nstdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB\nstdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/tmp/3.log\nstopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程\nkillasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程\n```\n","reference":"","dot":""},{"prefix":"","tag":"windows","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"dev","fold":false,"list":[{"prefix":"","tag":"hello world","suffix":"","desc":"","url":"","summary":"1.创建和启动虚拟环境\n2.安装依赖，并生成rq文件","reference":"","dot":""}]}]}]},{"column":[{"title":"语法","barcolor":"","fold":false,"box":[{"title":"声明与作用域","fold":false,"list":[{"prefix":"","tag":"x ","suffix":"= val","desc":"Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n**语句块不产生作用域**，只有模块，类以及函数才会引入新的作用域","url":"","summary":"Python允许你同时为多个变量赋值\n```a = b = c = 1```\n为多个对象指定多个变量\n```a, b, c = 1, 2, \"runoob\"```\n\n1.变量没有类型，类型属于对象，变量只是一个对象的引用（指针）\n2.不可变类型：数值、字符串、元组；其余为可变类型 \n3.if/for/while等不会引入新的作用域，无块作用域","reference":"","dot":""},{"prefix":"","tag":"global ","suffix":"x","desc":"全局作用域声明\n当内部作用域想修改外部作用域的变量时","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"nonlocal ","suffix":"x","desc":"声明变量为外层作用域变量（非全局）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"del ","suffix":"var..","desc":"可以通过使用del语句删除单个或多个对象\ndel var_a, var_b","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"locals()","suffix":"","desc":"以字典类型返回当前位置的全部局部变量","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"globals()","suffix":"","desc":"以字典类型返回当前位置的全部全局变量","url":"","summary":"","reference":"","dot":""}]},{"title":"运算符","fold":false,"list":[{"prefix":"","tag":"算术运算符","suffix":"","desc":"加法运算符：x + y\n减法运算符： x - y\n乘法运算符： x * y\n指数运算符：x ** y\n除法运算符：x / y\n余数运算符：x % y | math.fmod(x,y)\n地板除运算符：x // y","url":"","summary":"/ 返回一个浮点数，// 返回一个整数\n在混合计算时，Python会把整型转换成为浮点数。","reference":"","dot":""},{"prefix":"","tag":"赋值运算符","suffix":"","desc":"+= -= *= **= /= %= //=\n:= 海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。","url":"","summary":"在这个示例中，赋值表达式可以避免调用 len() 两次:\n```python\nif (n := len(a)) > 10:\n    print(f\"List is too long ({n} elements, expected <= 10)\")\n```","reference":"","dot":""},{"prefix":"","tag":"关系运算符","suffix":"","desc":"\\> 大于运算符\n\\< 小于运算符\n>= 大于或等于运算符\n<= 小于或等于运算符\n== 相等运算符 | math.isclose(x,y)\n!= 不相等运算符\nin / not in 是否存在于指定序列中（字符串，列表或元组）\nis / is not 判断两个标识符是不是引用自一个对象|存储单元","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"逻辑运算符 ","suffix":"","desc":"and 且运算符\nor 或运算符\nnot 取反运算符","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"位运算符","suffix":"","desc":"| 按位或\n& 按位与\n~ 按位取反\n^ 按位异或\n\\<< 左移运算符 \n\n>> 右移运算符","url":"","summary":"","reference":"","dot":""}]},{"title":"流程控制","fold":true,"list":[{"prefix":"","tag":"if..else..","suffix":"","desc":"```python\nif condition_1:\n    statement_block_1\nelif condition_2:\n    statement_block_2\nelse:\n    statement_block_3\n```","url":"","summary":"1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。\n2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。\n3、在Python中没有switch – case语句。","reference":"","dot":""},{"prefix":"","tag":"pass","suffix":"","desc":"pass是空语句，是为了保持程序结构的完整性\npass 不做任何事情，一般用做占位语句","url":"","summary":"","reference":"","dot":""}]},{"title":"循环语句","fold":true,"list":[{"prefix":"","tag":"while","suffix":"","desc":"```python\nwhile exp :\n    statement;\nelse:\n    statement;\n```","url":"","summary":"在 while … else 在条件语句为 false 时执行 else 的语句块","reference":"","dot":""},{"prefix":"","tag":"for x in s","suffix":"","desc":"Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。x为具体值。\n```for i, val in enumerate(seq)```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"break","suffix":"","desc":"退出无限循环，循环被break终止时else不执行","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"continue","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"模块","fold":false,"list":[{"prefix":"","tag":"import ","suffix":"module,..","desc":"引入一个模块(内置/自定义)\n对应的方法需要使用 module.name来使用","url":"","summary":"一个文件就是一个模块","reference":"","dot":""},{"prefix":"","tag":"form module import ","suffix":"name,..","desc":"从模块中导入一个指定的部分到当前命名空间\nform module import *\n引入全部变量与函数，但不包括以下划线开头部分，可直接使用模块内部的名称","url":"","summary":"\n","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"安装","fold":false,"list":[{"prefix":"","tag":"python -V","suffix":"","desc":"运行 `python3 filename`\n查看版本号 `python -V`\n进入REPL `python` `exit()`退出","url":"","summary":"vscode第三方模块报错配置添加 `\"python.pythonPath\": \"C:\\\\Program Files\\\\Python\\\\\",`","reference":"","dot":""},{"prefix":"","tag":"PATH","suffix":"","desc":"# mac \n打开\n```vi ~/.bash_profile```\n\n添加\n```\nexport PATH=${PATH}:/Library/Frameworks/Python.framework/Versions/3.10/bin\nalias python=\"/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10”\n\nexport PATH=${PATH}:/Library/Frameworks/Python.framework/Versions/3.10/bin\nalias pip=\"/Library/Frameworks/Python.framework/Versions/3.10/bin/pip3\"\n```\n\n应用\n```source ~/.bash_profile```","url":"","summary":"在`~/.zshrc`文件最后，增加一行：\n`source ~/.bash_profile`\n若没有`.zshrc`文件，在同级目录下`touch .zshrc` 创建文件\n添加`source ~/.bash_profile` 命令，保存退出","reference":"重启失效|https://blog.csdn.net/fish_study_csdn/article/details/109188801","dot":""}]},{"title":"参考资料","fold":false,"list":[{"prefix":"","tag":"标准库","suffix":"","desc":"","url":"https://docs.python.org/zh-cn/3/library/index.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"PyPI","suffix":"","desc":"","url":"https://pypi.org/","summary":"","reference":"","dot":""}]},{"title":"教程指南","fold":false,"list":[{"prefix":"","tag":"入门教程","suffix":"","desc":"","url":"https://www.liaoxuefeng.com/wiki/1016959663602400","summary":"","reference":"","dot":""},{"prefix":"","tag":"模块示例","suffix":"","desc":"","url":"https://pymotw.com/3/index.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"快速上手","suffix":"","desc":"# 1. 安装python，并设置环境变量PATH\n(1) 打开`vi ~/.bash_profile`\n(2) 添加\n```\nexport PATH=${PATH}:/Library/Frameworks/Python.framework/Versions/3.10/bin\nalias python=\"/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10”\nexport PATH=${PATH}:/Library/Frameworks/Python.framework/Versions/3.10/bin\nalias pip=\"/Library/Frameworks/Python.framework/Versions/3.10/bin/pip3\"\n```\n(3) 应用\n```source ~/.bash_profile```\n## 2. 创建项目，安装虚拟环境并激活 \n(1) 创建虚拟环境 `python3 -m venv venv`\n(2) 激活虚拟环境 `source ./venv/bin/activate`\n## 3. 安装依赖包\n(1) 设置镜像\n打开`~/.pip/pip.conf`\n添加\n```\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n(2) 创建requirements.txt\n(3) 执行 `pip3 install xxx`","url":"","summary":"","reference":"","dot":""}]}]}]}]}