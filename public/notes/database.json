{"version":1582593954133,"name":"data","data":[{"column":[{"title":"MySQL","barcolor":"","fold":false,"box":[{"title":"连接","fold":true,"list":[{"prefix":"","tag":"mysql -u root -p","suffix":"","desc":"连接数据库","url":"","summary":"","reference":"","dot":""}]},{"title":"库操作","fold":true,"list":[{"prefix":"","tag":"CREATE DATABASE ","suffix":"dbname","desc":"创建数据库","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"DROP DATABASE ","suffix":"dbname","desc":"删除数据库","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"USE ","suffix":"dbname","desc":"选择数据库","url":"","summary":"","reference":"","dot":""}]},{"title":"表操作","fold":false,"list":[{"prefix":"","tag":"CREATE TABLE ","suffix":"table_name (column_name column_type)","desc":"创建表","url":"","summary":"```\nCREATE TABLE IF NOT EXISTS `runoob_tbl`(\n   `runoob_id` INT UNSIGNED AUTO_INCREMENT,\n   `runoob_title` VARCHAR(100) NOT NULL,\n   `runoob_author` VARCHAR(40) NOT NULL,\n   `submission_date` DATE,\n   PRIMARY KEY ( `runoob_id` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```","reference":"","dot":"","title":"记录操作"},{"prefix":"","tag":"DROP TABLE ","suffix":"table_name","desc":"删除表","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"ALTER TABLE","suffix":"talble_name","desc":"删除列 `ALTER TABLE testalter_tbl  DROP i;`\n增加列 `ALTER TABLE testalter_tbl ADD i INT;`\n修改列 `ALTER TABLE testalter_tbl MODIFY c CHAR(10);`\n修改列 `ALTER TABLE testalter_tbl CHANGE i j BIGINT;`","url":"","summary":"","reference":"","dot":""}]},{"title":"记录操作","fold":true,"list":[{"prefix":"","tag":"INSERT INTO","suffix":" table_name","desc":"插入记录\n```\nINSERT INTO table_name ( field1, field2,...fieldN )\n                       VALUES\n                       ( value1, value2,...valueN );\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"SELECT * FROM ","suffix":"table_name","desc":"查询数据\n```\nSELECT column_name,column_name\nFROM table_name\n[WHERE Clause]\n[LIMIT N][ OFFSET M]\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"UPDATE table_name SET ","suffix":"key=val","desc":"更新记录\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2\n[WHERE Clause]\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"DELETE FROM ","suffix":"table_name","desc":"删除记录\n```\nDELETE FROM table_name [WHERE Clause]\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"子句","fold":false,"list":[{"prefix":"","tag":"WHERE","suffix":"","desc":"WHERE condition1 【AND|OR】 condition2\n```WHERE key=val```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"LIKE","suffix":"","desc":"like 匹配/模糊匹配，会与 % 和 _ 结合使用。\n```WHERE key LIKE %val%```\n\n'%a'     //以a结尾的数据\n'a%'     //以a开头的数据\n'%a%'    //含有a的数据\n'\\_a\\_'    //三位且中间字母是a的\n'\\_a'     //两位且结尾字母是a的\n'a\\_'     //两位且开头字母是a的","url":"","summary":"SQL LIKE 子句中使用百分号 %字符来表示任意字符，类似于UNIX或正则表达式中的星号 *。\n如果没有使用百分号 %, LIKE 子句与等号 = 的效果是一样的。\n\n------\n\n%：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。\n\\_：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。\n[]：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。\n[^] ：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。\n查询内容包含通配符时,由于通配符的缘故，导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现，而把特殊字符用 “[ ]” 括起便可正常查询。","reference":"","dot":""},{"prefix":"","tag":"REGEXP","suffix":"","desc":"除LIKE外，可使用正则。\n```SELECT name FROM person_tbl WHERE name REGEXP '^st';```","url":"","summary":"","reference":"参考资料|https://www.runoob.com/mysql/mysql-regexp.html","dot":""},{"prefix":"","tag":"UNION","suffix":"","desc":"MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\n```\nSELECT * FROM A \nUNION [ALL | DISTINCT]\nSELECT * FROM B\n```\nDISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。\nALL: 可选，返回所有结果集，包含重复数据。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"ORDER BY ","suffix":"","desc":"排序，默认ASC，可按顺序基于多个条件排序\n```ORDER BY key1 ASC,key2 DESC```","url":"","summary":"拼音排序\n1.如果字符集采用的是 gbk(汉字编码字符集)，直接在查询语句后边添加 ORDER BY：\n```SELECT * FROM tablename ORDER BY key;```\n2.如果字符集采用的是 utf8(万国码)，需要先对字段进行转码然后排序：\n```SELECT * FROM tablename ORDER BY CONVERT(key using gbk);```","reference":"","dot":""},{"prefix":"","tag":"GROUP BY","suffix":"","desc":"对结果集进行统计，在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。\n```SELECT coalesce(name, '总计name'), SUM(key) as new_key FROM  table_name GROUP BY name WITH ROLLUP;``` \ngroup by 必须出现在where之后 order by 之前。","url":"","summary":"1.统计每个name的记录次数。\n```SELECT name, COUNT(*) FROM  table_name GROUP BY name;```\n2.统计每个name的某个列的值总和。（可使用as替换名称）\n```SELECT name, SUM(key) as new_key FROM  table_name GROUP BY name```\n3.额外统计全局的值。（并使用一个自定义名称作为总计key）\n```SELECT coalesce(name, '总数'), SUM(key) as new_key FROM  table_name GROUP BY name WITH ROLLUP;``` ","reference":"参考示例1|https://www.runoob.com/mysql/mysql-group-by-statement.html\n参考示例2|https://www.jianshu.com/p/8f35129dd2ab","dot":""},{"prefix":"","tag":"HAVING","suffix":"","desc":"如果想要从 GROUP BY 分组中进行筛选的话，不是用 WHERE 而是使用 HAVING 来进行聚合函数的筛选。\n```\nSELECT <列名1>, <列名2>, <列名3>, ……\nFROM <表名>\nGROUP BY <列名1>, <列名2>, <列名3>, ……\nHAVING <分组结果对应的条件>\n```\nHAVING 子句必须写在GROUP BY 子句之后，其在DBMS 内部的执行顺序也排在GROUP BY 子句之后。","url":"","summary":"什么时候用 WHERE 什么时候使用 HAVING 呢？\nWHERE 子句 = 指定行所对应的条件\nHAVING 子句 = 指定组所对应的条件\nWHERE 处理速度比 HAVING 处理速度高\n聚合键所对应的条件不应该书写在 HAVING 子句当中，而应该书写在 WHERE 子句当中。","reference":"参考资料|https://www.jianshu.com/p/7701bf10167b","dot":""}]},{"title":"函数","fold":false,"list":[{"prefix":"","tag":"functions","suffix":"","desc":"","url":"https://www.runoob.com/mysql/mysql-functions.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"CONCAT","suffix":"","desc":"单表多字段模糊查询\n```sql\nSELECT * FROM `magazine` WHERE CONCAT(IFNULL(`title`,''),IFNULL(`tag`,''),IFNULL(`description`,'')) LIKE '%关键字%'\n```\n\n```javascript\nwhere: {\n  [Op.or]: [\n    {ch: {[Op.like]: `%${search || ''}%`}},\n    {en: {[Op.like]: `%${search || ''}%`}},\n  ],\n},\n```","url":"","summary":"","reference":"mysql参考资料|https://blog.csdn.net/yaoyao9565/article/details/51305854\nsequelize参考资料|https://segmentfault.com/q/1010000022293449","dot":""}]},{"title":"Misc","fold":false,"list":[{"prefix":"","tag":"misc","suffix":"","desc":"1. “长度”为会显示的总位数，“小数点”为会显示的小数位数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"bug","suffix":"","desc":"1.gmt：0000-00-00 00:00:00   1999-01-01 00:00:00","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Sequelize","barcolor":"","fold":false,"box":[{"title":"Connect","fold":false,"list":[{"prefix":"","tag":"new Sequelize","suffix":"(config)","desc":"创建数据库连接实例\n`const sequelize = new Sequelize(\"sqlite::memory:\");`","url":"","summary":"```javascript\nconst sequelize = new Sequelize(database, username, password, {\n    host: host,\n    dialect: \"mysql\",\n    pool: {\n        max: 5,\n        min: 0,\n        idle: 30000,\n        acquire: 20000,\n    },\n    logging: true,\n    timezone: \"+08:00\",\n    define: {\n        timestamps: true,\n        createdAt: true,\n        updatedAt: true,\n        underscored: true\n    },\n    query: {\n        raw: true,\n    },\n});\n\nsequelize\n    .authenticate()\n    .then(() => {\n        console.log(\"Connection has been established successfully.\");\n    })\n    .catch(err => {\n        console.error(\"Unable to connect to the database:\", err);\n    });\n\n// 一次性同步全部模型\n// sequelize.sync();\n```","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getting-started.md","dot":""},{"prefix":"sequelize","tag":".sync()","suffix":"","desc":"一次性同步全部模型","url":"","summary":"","reference":"","dot":""}]},{"title":"Model","fold":false,"list":[{"prefix":"","tag":"$Model","suffix":".init({})","desc":"初始化 模型类\n```\nclass User extends Model {}\nUser.init({\n  // 在这里定义模型属性\n  key: {\n    type: DataTypes.STRING,\n    ..\n  },\n}, {\n  // 这是其他模型参数\n  sequelize, // 我们需要传递连接实例\n  modelName: 'User' // 我们需要选择模型名称\n  tableName : \"tablename\", //表名\n});\n```","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-basics.md","dot":""},{"prefix":"$Model","tag":".sync()","suffix":"","desc":"同步模型，仅读实例时可无","url":"","summary":"```\nconst { Sequelize, DataTypes, Model } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory');\n\nclass User extends Model {}\nUser.init({\n  // 在这里定义模型属性\n  col: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n}, {\n  // 这是其他模型参数\n  sequelize, // 我们需要传递连接实例\n  modelName: 'User' // 我们需要选择模型名称\n  tableName : \"tablename\", //表名\n  createdAt: \"user_registered\", //timestamp列名重定义\n});\n\n//同步模型，仅读实例时可无\nUser.sync()\n```","reference":"","dot":""},{"prefix":"","tag":"DataTypes","suffix":".TYPE","desc":"# 数据类型\n+ `STRING` 字符串\n+ `TEXT` 长文\n+ `INTEGER` 整数  \n+ `BIGINT(11)` 大整数\n+ `DATE` 日期时间","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-basics.md","dot":""},{"prefix":"","tag":"key","suffix":".$prop","desc":"# 列参数\n+ `type`: DataTypes.BOOLEAN 数据类型\n+ `primaryKey`: true 主键\n+ `autoIncrement`: true 自增\n+ `allowNull`: false 非空\n+ `defaultValue`: DataTypes.NOW 默认值\n+ `unique`: true 唯一\n+ unique: 'group' 组合唯一\nuniqueOne: { type: DataTypes.STRING,  unique: 'compositeIndex' },\nuniqueTwo: { type: DataTypes.INTEGER, unique: 'compositeIndex' },\n","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-basics.md","dot":""},{"prefix":"key.","tag":"get|set()","suffix":"","desc":"+ getter `get(){this.getDataValue('col')}`\n+ setter `set(val){this.setDataValue('col', hash(val))}`\n+ 虚拟列 `DataTypes.VIRTUAL`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getters-setters-virtuals.md","dot":""},{"prefix":"key.","tag":"validate","suffix":"","desc":"验证\n```\nkey: {\n    type: DataTypes.STRING,\n    validate : {\n        is: /^[a-z]+$/i,          // 匹配这个 RegExp\n        isInt: {\n            msg: \"必须是价格的整数\"\n        },\n        isIn: {\n            args: [['en', 'zh']],\n            msg: \"必须为英文或中文\"\n        },\n        isEven(value) {  //自定义规则\n            if (parseInt(value) % 2 !== 0) {\n                throw new Error('Only even values are allowed!');\n            }\n        }\n    }\n}\n```","url":"","summary":"is: /^[a-z]+$/i,          // 匹配这个 RegExp\nis: [\"^[a-z]+$\",'i'],     // 与上面相同,但是以字符串构造 RegExp\nnot: /^[a-z]+$/i,         // 不匹配 RegExp\nnot: [\"^[a-z]+$\",'i'],    // 与上面相同,但是以字符串构造 RegExp\nisEmail: true,            // 检查 email 格式 (foo@bar.com)\nisUrl: true,              // 检查 url 格式 (http://foo.com)\nisIP: true,               // 检查 IPv4 (129.89.23.1) 或 IPv6 格式\nisIPv4: true,             // 检查 IPv4 格式 (129.89.23.1)\nisIPv6: true,             // 检查 IPv6 格式\nisAlpha: true,            // 只允许字母\nisAlphanumeric: true,     // 将仅允许使用字母数字,因此 '_abc' 将失败\nisNumeric: true,          // 只允许数字\nisInt: true,              // 检查有效的整数\nisFloat: true,            // 检查有效的浮点数\nisDecimal: true,          // 检查任何数字\nisLowercase: true,        // 检查小写\nisUppercase: true,        // 检查大写\nnotNull: true,            // 不允许为空\nisNull: true,             // 只允许为空\nnotEmpty: true,           // 不允许空字符串\nequals: 'specific value', // 仅允许 'specific value'\ncontains: 'foo',          // 强制特定子字符串\nnotIn: [['foo', 'bar']],  // 检查值不是这些之一\nisIn: [['foo', 'bar']],   // 检查值是其中之一\nnotContains: 'bar',       // 不允许特定的子字符串\nlen: [2,10],              // 仅允许长度在2到10之间的值\nisUUID: 4,                // 只允许 uuid\nisDate: true,             // 只允许日期字符串\nisAfter: \"2011-11-05\",    // 仅允许特定日期之后的日期字符串\nisBefore: \"2011-11-05\",   // 仅允许特定日期之前的日期字符串\nmax: 23,                  // 仅允许值 <= 23\nmin: 23,                  // 仅允许值 >= 23\nisCreditCard: true,       // 检查有效的信用卡号","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/validations-and-constraints.md","dot":""}]},{"title":"Record","fold":false,"list":[{"prefix":"record","tag":".toJSON()","suffix":"","desc":"输出object","url":"","summary":"查看结果 `record.dataValues` 或在dao层中then返回`return res.dataValues`","reference":"","dot":""},{"prefix":"record","tag":".save()","suffix":"","desc":"`await ins.save()`","url":"","summary":"","reference":"","dot":""}]},{"title":"Create","fold":false,"list":[{"prefix":"$Model","tag":".create","suffix":"(obj)","desc":"添加实例 `const record = await User.create({ name: \"Jane\" });`\n","url":"","summary":"# 查看实例条目尽量使用过滤\n`$model_ins.toJSON()`\n\n# 同步手动方法\n```\nconst jane = User.build({ name: \"Jane\" });\n//do some edit\nawait jane.save();\n```","reference":"","dot":""},{"prefix":"$Model","tag":".bulkCreate","suffix":"([obj,..])","desc":"批量创建\nfields 参数指定批量创建时使用的字段，其余字段将被忽略.\n```\nawait User.bulkCreate([\n  { username: 'foo' },\n  { username: 'bar', admin: true }\n], { fields: ['username'] });\n// foo 和 bar 都不会是管理员.\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"Delete","fold":false,"list":[{"prefix":"record","tag":".destroy()","suffix":"","desc":"删除实例 `await jane.destroy();`","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".destroy","suffix":"(opt)","desc":"```\n// 删除所有名为 \"Jane\" 的人 \nawait User.destroy({\n  where: {\n    firstName: \"Jane\"\n  }\n});\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".restore","suffix":"(opt)","desc":"# 模型设置\n`paranoid: true`\n# 删除操作\n软删除 `await $Model.destroy(opt)`\n硬删除 `await $Model.destroy({opt,force: true})`\n# 恢复\n`await $Model.restore(opt)`\n# 查询\n`await $Model.findAll({opt,paranoid: false})`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/paranoid.md","dot":""}]},{"title":"Update","fold":false,"list":[{"prefix":"record","tag":".update","suffix":"(data)","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"record","tag":".reload()","suffix":"","desc":"重载实例 `await jane.reload();`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-instances.md","dot":""},{"prefix":"record","tag":".increment","suffix":"(key)","desc":"递减 `decrement` \n递增1 `await user.increment('age')`\n递增2 `await user.increment('age', { by: 2 })`\n多个列递增\n```\nawait jane.increment({\n  'age': 2,\n  'cash': 100\n});\n```\n多个列相同递增 `await jane.increment(['age', 'cash'], { by: 2 });`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-instances.md","dot":""},{"prefix":"$Model","tag":".update","suffix":"(keys,opt)","desc":"```\n// 将所有没有姓氏的人更改为 \"Doe\"\nawait User.update({ lastName: \"Doe\" }, {\n  where: {\n    lastName: null\n  }\n});\n```","url":"","summary":"","reference":"","dot":"","title":"Storage"}]},{"title":"Read","fold":false,"list":[{"prefix":"$Model","tag":".findAll","suffix":"(opt)","desc":"无参数代表整张表\n`attributes: ['foo', ['bar', 'baz'], 'qux']` 过滤显示的字段","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-querying-basics.md\ncount异常|https://github.com/sequelize/sequelize/issues/10557","dot":""},{"prefix":"$Model","tag":".findByPk","suffix":"(id)","desc":"使用提供的主键从表中仅获得一个条目\n`const project = await Project.findByPk(123)`","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".findOrCreate","suffix":"(opt)","desc":"除非找到一个满足查询参数的结果否则创建\n```\nconst [user, created] = await User.findOrCreate({\n  where: { username: 'sdepold' },\n  defaults: {\n    job: 'Technical Lead JavaScript'\n  }\n});\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".findOne","suffix":"(opt)","desc":"找到的第一个条目\n`const project = await Project.findOne({ where: { title: 'My Title' } })`","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".findAndCountAll","suffix":"(opt)","desc":"findAndCountAll 方法返回一个具有两个属性的对象：\ncount - 一个整数 - 符合查询条件的记录总数\nrows - 一个数组对象 - 获得的记录\n```\nconst { count, rows } = await Project.findAndCountAll({\n  where: {\n    title: {\n      [Op.like]: 'foo%'\n    }\n  },\n  offset: 10,\n  limit: 2\n});\n```","url":"","summary":"findAndCountAll 方法是结合了 findAll 和 count 的便捷方法. 在处理与分页有关的查询时非常有用,在分页中,你想检索带有 limit 和 offset 的数据,但又需要知道与查询匹配的记录总数.\n\n","reference":"","dot":""}]},{"title":"Clause/Option","fold":false,"list":[{"prefix":"","tag":"Op","suffix":"","desc":"# 逻辑运算\n`[Op.and]` AND且\n`[Op.or]` OR或\n# 相等运算\n`[Op.eq]`: 3,                              // = 3\n`[Op.ne]`: 20,                             // != 20\n`[Op.is]`: null,                           // IS NULL\n`[Op.not]`: true,                          // IS NOT TRUE\n`[Op.or]`: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n# 数字比较\n`[Op.gt]`: 6,                              // > 6\n`[Op.gte]`: 6,                             // >= 6\n`[Op.lt]`: 10,                             // < 10\n`[Op.lte]`: 10,                            // <= 10\n`[Op.between]`: [6, 10],                   // BETWEEN 6 AND 10\n`[Op.notBetween]`: [11, 15],               // NOT BETWEEN 11 AND 15\n# 可选匹配\n`[Op.in]`: [1, 2],                         // IN [1, 2]\n`[Op.notIn]`: [1, 2],                      // NOT IN [1, 2]\n`[Op.startsWith]`: 'hat',                  // LIKE 'hat%' 开头\n`[Op.endsWith]`: 'hat',                    // LIKE '%hat' 结尾\n`[Op.substring]`: 'hat',                   // LIKE '%hat%' 包含\n`[Op.regexp]`: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (仅 MySQL/PG)\n`[Op.notRegexp]`: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (仅 MySQL/PG)","url":"","summary":"","reference":"参考资料|https://blog.csdn.net/longshenlmj/article/details/19079221","dot":""},{"prefix":"","tag":"attributes","suffix":"[key,..]","desc":"指定列 或 SELECT *\n指定列 `attributes: ['foo', 'bar']`\n排除列 `attributes: { exclude: ['baz'] }`\n仅查询时可用，创建更新时不可用\n\nMyModel.update(newValue, {fields: myFields})","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"where","suffix":"{key:val}","desc":"列匹配过滤 SELECT * FROM table WHERE x=val\n# AND\n```\nwhere: {\n    key1: val1,\n    key2: [1,2,3], //隐式调用IN\n    key3 : {\n        [Op.eq] : 3\n    }\n}\n```\n\n# OR\n```\nwhere: {\n    [Op.or]: [\n      { authorId: 12 },\n      { authorId: 13 }\n    ]\n}\n```","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-querying-basics.md","dot":""},{"prefix":"","tag":"order","suffix":"[[key,fn]..]","desc":"排序,默认ASC升序（升序时可不用2维数组指定），可用值：NULLS FIRST\n```\nSubtask.findAll({\n  order: [\n    // 将转义 title 并针对有效方向列表进行降序排列\n    ['title', 'DESC'],\n\n    // 将按最大年龄进行降序排序\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n  ]\n})\n\n```","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-querying-basics.md","dot":""},{"prefix":"","tag":"limit","suffix":"","desc":"限制（分页）\n```\n// 提取10个实例/行\nProject.findAll({ limit: 10 });\n```","url":"","summary":"```\nlet {count,rows} =  await Post.findAndCountAll({\n            where: condition,\n            order: order,\n            offset: per * (page - 1),\n            limit: Math.min(parseInt(per),20)   //最大不超过20\n        })\n        let result = {\n            total : count,\n            per : per,\n            pages : Math.ceil(count / per),\n            page : page,\n            list : []\n        }\n```","reference":"","dot":""},{"prefix":"","tag":"offset","suffix":"","desc":"```\n// 跳过8个实例/行\nProject.findAll({ offset: 8 });\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"Associations","fold":false,"list":[{"prefix":"","tag":"include","suffix":" {1-1}","desc":"1对1","url":"","summary":"### 定义关系\n```javascript\n// 1----1   一对一关系\nUser.hasOne(UserInfo, {foreignKey: 'user_id', sourceKey: 'id'})\nUserInfo.belongsTo(User, {foreignKey: 'user_id', targetKey: 'id'})\n// User.hasOne(UserInfo, {foreignKey: 'user_id', sourceKey: 'id', as: 'user_info'})\n// UserInfo.belongsTo(User, {foreignKey: 'user_id', targetKey: 'id', as: 'user_info'})\n```\n\n### 查询\n```javascript\nrouter.get('/:username', (req, res) => {\n  let username = req.params.username\n  User.findOne({\n    where: {\n      username: username\n    },\n    include: [UserInfo]\n    // include: [\n    //   {model: UserInfo, as: 'user_info'},\n    // ]\n    // include: [{all: true}]\n  }).then((result) => {\n    res.json(result)\n  }).catch((err) => {\n    res.status(500).send(err)\n  });\n})\n```","reference":"","dot":""},{"prefix":"","tag":"include","suffix":" {1-n}","desc":"1对多","url":"","summary":"### 定义关系\n```javascript\n// 1----n   一对多关系\nUser.hasMany(Phone, {foreignKey: 'user_id', sourceKey: 'id'})\nPhone.belongsTo(User, {foreignKey: 'user_id', targetKey: 'id'})\n// User.hasMany(UserInfo, {foreignKey: 'user_id', sourceKey: 'id', as: 'phone'})\n// Phone.belongsTo(User, {foreignKey: 'user_id', targetKey: 'id', as: 'phone'})\n```\n\n### 查询\n```javascript\nrouter.get('/:username', (req, res) => {\n  let username = req.params.username\n  User.findOne({\n    where: {\n      username: username\n    },\n    include: [UserInfo, Phone]\n    // include: [\n    //   {model: UserInfo, as: 'user_info'},\n    //   {model: Phone, as: 'phone'},\n    // ]\n    // include: [{all: true}]\n  }).then((result) => {\n    res.json(result)\n  }).catch((err) => {\n    res.status(500).send(err)\n  });\n})\n```","reference":"","dot":""},{"prefix":"","tag":"include","suffix":" {n-n}","desc":"多对多","url":"","summary":"### 定义关系\n```javascript\n// 定义关系\n// n----n   多对多关系\nCourse.belongsToMany(User, {through: Course2Student, foreignKey: 'course_id'})\nUser.belongsToMany(Course, {through: Course2Student, foreignKey: 'user_id'})\n\n// 查询\nrouter.get('/:username', (req, res) => {\n  let username = req.params.username\n  User.findOne({\n    where: {\n      username: username\n    },\n    // include: [UserInfo, Phone, School]\n    // include: [\n    //   {model: UserInfo, as: 'user_info'},\n    //   {model: Phone, as: 'phone'},\n    //   {model: School, as: 'school'},\n    // ]\n    include: [{all: true}]\n  }).then((result) => {\n    res.json(result)\n  }).catch((err) => {\n    res.status(500).send(err)\n  });\n})\n```","reference":"","dot":""},{"prefix":"foreign key","tag":" ","suffix":"","desc":"一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY(唯一约束的键)。\nFOREIGN KEY 约束用于预防破坏表之间连接的行为。\nFOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。","url":"","summary":"","reference":"参考资料|https://www.runoob.com/sql/sql-foreignkey.html","dot":""},{"prefix":"","tag":"跨库联表","suffix":"","desc":"# 同实例跨库\n设置包含实例 `db.jx3box.dialect.supports.schemas = true;`\n设置包含模型 `schema: \"jx3box\", //使用数据库名称`\n\n# 跨实例跨库\n```\nUser.findAll({\n  include: [{\n    model: Order,\n    /* 其他关联配置 */\n    options: { sequelize: db2 }\n  }],\n  /* 其他查询配置 */\n  options: { sequelize: db1 }\n});\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"Misc","fold":false,"list":[{"prefix":"$Model","tag":".count","suffix":"(opt)","desc":"计算数据库中元素出现的次数\n```\nconst amount = await Project.count({\n  where: {\n    id: {\n      [Op.gt]: 25\n    }\n  }\n});\nconsole.log(`这有 ${amount} 个项目 id 大于 25`);\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".max|min|sum","suffix":"(opt)","desc":"```\nawait User.max('age'); // 40\nawait User.max('age', { where: { age: { [Op.lt]: 20 } } }); // 10\nawait User.min('age'); // 5\nawait User.min('age', { where: { age: { [Op.gt]: 5 } } }); // 10\nawait User.sum('age'); // 55\nawait User.sum('age', { where: { age: { [Op.gt]: 5 } } }); // 50\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"sequelize","tag":".query","suffix":"(str)","desc":"原始查询，返回两个参数 - 一个结果数组,以及一个包含元数据\n`const [results, metadata] = await sequelize.query(\"UPDATE users SET y = 42 WHERE x = 12\");`\n","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/raw-queries.md","dot":"","title":"Elasticsearch"}]}]}]},{"column":[{"title":"Redis","barcolor":"","fold":false,"box":[{"title":"文档","fold":false,"list":[{"prefix":"","tag":"命令参考","suffix":"","desc":"","url":"http://doc.redisfans.com/","summary":"","reference":"","dot":""},{"prefix":"","tag":"Try redis","suffix":"","desc":"","url":"https://try.redis.io/","summary":"","reference":"","dot":""},{"prefix":"","tag":"Docker","suffix":"","desc":"","url":"https://www.runoob.com/docker/docker-install-redis.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"demo","suffix":"","desc":"docker run -d --name msg-redis -p 6379:6379 redis:alpine redis-server --requirepass test\n\ndocker run -d --name msg-redis --restart=always \\\n-v /root/redis:/data \\\n--net=host \\\nredis:alpine \\\nredis-server --save 5 1 --loglevel warning --requirepass testpwd","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"MongoDB","barcolor":"","fold":false,"box":[{"title":"database","fold":false,"list":[{"prefix":"","tag":"mongodb://","suffix":"host","desc":"启动 `mongo`\n连接 `mongodb://username:password@host:port/dbname?options`","url":"","summary":"","reference":"参考资料|https://www.runoob.com/mongodb/mongodb-connections.html","dot":""},{"prefix":"","tag":"show dbs","suffix":"","desc":"显示所有数据的列表","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"use ","suffix":"db","desc":"如果数据库不存在，则创建数据库，否则切换到指定数据库。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"db","suffix":"","desc":"显示当前数据库对象或集合","url":"","summary":"在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建。","reference":"","dot":""},{"prefix":"","tag":"db.dropDatabase()","suffix":"","desc":"删除当前数据库\n默认为 test，你可以使用 db 命令查看当前数据库名。","url":"","summary":"","reference":"","dot":""}]},{"title":"collection","fold":false,"list":[{"prefix":"","tag":"db.createCollection","suffix":"(name, options)","desc":"## 创建集合\n+ `capped` 如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。\n+ `size` 为固定集合指定一个最大值，即字节数。当capped为 true 时，必须指定 size 参数。\n+ `max` 指定固定集合中包含文档的最大数量。在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。\n\n## 自动创建\n在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。\n```db.mymongo2.insert({\"name\" : \"mongo\"})```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"show collections","suffix":"","desc":"查看已有集合 show tables","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"db.<col>.drop()","suffix":"","desc":"删除集合","url":"","summary":"","reference":"","dot":""}]},{"title":"document","fold":false,"list":[{"prefix":"","tag":"db.<col>.insertOne/Many","suffix":"(document/arr)","desc":"插入文档\n若插入的数据主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常，提示主键重复，不保存当前数据。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"db.<col>.find(where)","suffix":".pretty()","desc":"查看文档记录\n查看全部`db.<col>.find()`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"db.<col>.updateOne/Many","suffix":"(where,data,options)","desc":"更新数据\n```\ndb.collection.update(\n   <query>,\n   <update>,\n   {\n     upsert: <boolean>,\n     multi: <boolean>,\n     writeConcern: <document>\n   }\n)\n```","url":"","summary":"参数说明：\n+ `query` : update的查询条件，类似sql update查询内where后面的。\n+ `update` : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n+ `upsert` : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n+ `multi` : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n+ `writeConcern` :可选，抛出异常的级别。","reference":"参考资料|https://www.runoob.com/mongodb/mongodb-update.html","dot":""},{"prefix":"","tag":"db.<col>.replaceOne","suffix":"(where,option)","desc":"替换，不会合并和保留其它字段","url":"","summary":"","reference":"参考资料|https://mlog.club/article/1966672","dot":""},{"prefix":"","tag":"db.<col>.deleteOne/Many","suffix":"(where,options)","desc":"删除文档\n```\ndb.collection.remove(\n   <query>,\n   {\n     justOne: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n\n删除所有`db.col.remove({})`","url":"","summary":"参数说明：\n+ `query` :（可选）删除的文档的条件。\n+ `justOne` : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n+ `writeConcern` :（可选）抛出异常的级别。","reference":"","dot":""},{"prefix":"","tag":"db.<col>.bulkWrite","suffix":"(arr)","desc":"批量执行CURD\n```js\n[\ninsertOne : {document :data},\nupdateOne : {filter:where,update:data},\ndeleteOne : {filter:where},\nreplaceOne : {filter:where,replacement:data},\n]\n```","url":"","summary":"```\ntry {\n   db.characters.bulkWrite(\n      [\n         { insertOne :\n            {\n               \"document\" :\n               {\n                  \"_id\" : 4, \"char\" : \"Dithras\", \"class\" : \"barbarian\", \"lvl\" : 4\n               }\n            }\n         },\n         { insertOne :\n            {\n               \"document\" :\n               {\n                  \"_id\" : 5, \"char\" : \"Taeln\", \"class\" : \"fighter\", \"lvl\" : 3\n               }\n            }\n         },\n         { updateOne :\n            {\n               \"filter\" : { \"char\" : \"Eldon\" },\n               \"update\" : { $set : { \"status\" : \"Critical Injury\" } }\n            }\n         },\n         { deleteOne :\n            { \"filter\" : { \"char\" : \"Brisbane\"} }\n         },\n         { replaceOne :\n            {\n               \"filter\" : { \"char\" : \"Meldane\" },\n               \"replacement\" : { \"char\" : \"Tanys\", \"class\" : \"oracle\", \"lvl\" : 4 }\n            }\n         }\n      ]\n   );\n}\ncatch (e) {\n   print(e);\n}\n```","reference":"","dot":""}]},{"title":"query option","fold":false,"list":[{"prefix":"","tag":".limit","suffix":"(n)","desc":"读取指定数量的数据记录","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":".skip","suffix":"(n)","desc":"我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。\n注:skip()方法默认参数为 0 。\n类似与mysql offset","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":".sort","suffix":"({key:1/-1})","desc":"排序：其中 1 为升序排列，而 -1 是用于降序排列。","url":"","summary":"","reference":"","dot":""}]},{"title":"projection operators","fold":false,"list":[{"prefix":"","tag":"$comparison","suffix":"","desc":"默认`{<key>:<value>}`即key=value，其它`{<key>:{$lt:<value>}}`\n+ `$eq` Matches values that are equal to a specified value.\n+ `$gt` Matches values that are greater than a specified value.\n+ `$gte` Matches values that are greater than or equal to a specified value.\n+ `$in` Matches any of the values specified in an array.\n+ `$lt` Matches values that are less than a specified value.\n+ `$lte` Matches values that are less than or equal to a specified value.\n+ `$ne` Matches all values that are not equal to a specified value.\n+ `$nin` Matches none of the values specified in an array.","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$logical","suffix":"","desc":"默认`{key1:value1, key2:value2}`即key1=value1且key2=value2\n其它`{$or: [{key1: value1}, {key2:value2}]}`\n\n+ `$and` Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n+ `$not` Inverts the effect of a query expression and returns documents that do not match the query expression.\n+ `$nor` Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n+ `$or` Joins query clauses with a logical OR returns all documents that match the conditions of either clause.","url":"","summary":"## and 与 or联合使用\n`db.col.find({\"likes\": {$gt:50}, $or: [{\"by\": \"菜鸟教程\"},{\"title\": \"MongoDB 教程\"}]}).pretty()`","reference":"","dot":""},{"prefix":"","tag":"$element","suffix":"","desc":"+ `$exists` Matches documents that have the specified field.\n+ `$type` Selects documents if a field is of the specified type.","url":"","summary":"","reference":"","dot":""},{"prefix":"more","tag":" ","suffix":"","desc":"","url":"https://www.mongodb.com/docs/manual/reference/operator/query/#std-label-query-projection-operators-top","summary":"","reference":"","dot":""}]},{"title":"extend","fold":false,"list":[{"prefix":"","tag":"db.<col>.createIndex","suffix":"(keys,options)","desc":"创建索引 `db.col.createIndex({\"title\":1})`\n复合索引 `db.col.createIndex({\"title\":1,\"description\":-1})`\n建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 \"background\" 可选参数。","url":"","summary":"<table class=\"reference\">\n<tbody><tr><th style=\"width:10%;\">Parameter</th><th style=\"width:10%;\">Type</th><th>Description</th></tr>\n<tr><td>background</td><td>Boolean</td><td>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 \"background\" \n   可选参数。  \"background\" 默认值为<b>false</b>。</td></tr>\n<tr><td>unique</td><td>Boolean</td><td>建立的索引是否唯一。指定为true创建唯一索引。默认值为<b>false</b>.</td></tr>\n<tr><td>name</td><td>string</td><td>索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr>\n<tr><td>sparse</td><td>Boolean</td><td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <b>false</b>.</td></tr>\n<tr><td>expireAfterSeconds</td><td>integer</td><td>指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr>\n<tr><td>v</td><td>index version</td><td>索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr>\n<tr><td>weights</td><td>document</td><td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr>\n<tr><td>default_language</td><td>string</td><td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr>\n<tr><td>language_override</td><td>string</td><td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td></tr>\n</tbody></table>","reference":"","dot":""},{"prefix":"","tag":"db.<col>.aggregate","suffix":"([way,..])","desc":"聚合`db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : 1}}}])`\n类似与mysql中的functions","url":"","summary":"<table class=\"reference\">\n<tbody><tr><th style=\"width:10%;\">表达式</th><th style=\"width:50%\">描述</th><th>实例</th></tr>\n<tr><td>$sum</td><td>计算总和。</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : \"$likes\"}}}])</td></tr>\n<tr><td>$avg</td><td>计算平均值</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$avg : \"$likes\"}}}])</td></tr>\n<tr><td>$min</td><td>获取集合中所有文档对应值得最小值。</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$min : \"$likes\"}}}])</td></tr>\n<tr><td>$max</td><td>获取集合中所有文档对应值得最大值。</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$max : \"$likes\"}}}])</td></tr>\n<tr><td>$push</td><td>将值加入一个数组中，不会判断是否有重复的值。</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", url : {$push: \"$url\"}}}])</td></tr>\n<tr><td>$addToSet</td><td>将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", url : {$addToSet : \"$url\"}}}])</td></tr>\n<tr><td>$first</td><td>根据资源文档的排序获取第一个文档数据。</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", first_url : {$first : \"$url\"}}}])</td></tr>\n<tr><td>$last</td><td>根据资源文档的排序获取最后一个文档数据</td><td>db.mycol.aggregate([{$group : {_id : \"$by_user\", last_url : {$last : \"$url\"}}}])</td></tr>\n</tbody></table>","reference":"参考资料|https://www.mongodb.com/docs/manual/reference/sql-aggregation-comparison/","dot":""},{"prefix":"Map-Reduce","tag":" ","suffix":"","desc":"管道操作一个文档\n$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。\n$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。\n$limit：用来限制MongoDB聚合管道返回的文档数。\n$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。\n$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。\n$group：将集合中的文档分组，可用于统计结果。\n$sort：将输入文档排序后输出。\n$geoNear：输出接近某一地理位置的有序文档。","url":"","summary":"```\ndb.article.aggregate(\n    { $project : {\n        title : 1 ,\n        author : 1 ,\n    }}\n);\n\ndb.articles.aggregate( [\n   { $match : { score : { $gt : 70, $lte : 90 } } },\n   { $group: { _id: null, count: { $sum: 1 } } }\n] );\n```","reference":"参考资料|https://www.runoob.com/mongodb/mongodb-aggregate.html","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"","tag":"官方文档","suffix":"","desc":"","url":"https://www.mongodb.com/docs/manual/tutorial/getting-started/","summary":"","reference":"","dot":""},{"prefix":"","tag":"入门教程","suffix":"","desc":"","url":"https://www.runoob.com/mongodb/mongodb-tutorial.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"下载安装","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Mongoose","barcolor":"","fold":false,"box":[{"title":"Connect","fold":false,"list":[{"prefix":"","tag":"mongoose.connect","suffix":"(config)","desc":"```js\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/test');\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"","tag":"官方文档","suffix":"","desc":"","url":"https://mongoosejs.com/docs/guide.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"中文文档","suffix":"","desc":"","url":"http://mongoosejs.net/docs/guide.html","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"ElasticSearch","barcolor":"","fold":false,"box":[{"title":"Env","fold":false,"list":[{"prefix":"docker ","tag":"install","suffix":"","desc":"docker pull docker.elastic.co/elasticsearch/elasticsearch:7.9.3\ndocker network create esnet\ndocker run --name es -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:7.9.3","url":"","summary":"","reference":"概念入门|https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html\n本地安装|https://juejin.im/entry/6844903919013855240","dot":""},{"prefix":"docker ","tag":"plugins","suffix":"","desc":"docker exec -it es /bin/bash","url":"","summary":"","reference":"IK中文分词器|https://www.cnblogs.com/szwdun/p/10664348.html","dot":""}]},{"title":"Extend","fold":false,"list":[{"prefix":"","tag":"kibana","suffix":"","desc":"","url":"","summary":"","reference":"ES Kibana用户手册|https://www.elastic.co/guide/cn/kibana/current/index.html","dot":""}]}]}]}]}