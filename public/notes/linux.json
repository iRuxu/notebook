{"version":1577292216582,"name":"linux","data":[{"column":[{"title":"文件管理","barcolor":"","fold":false,"box":[{"title":"server","fold":false,"list":[{"prefix":"","tag":"ulimit -an","suffix":"","desc":"open files限制","url":"","summary":"修改文件 `vim /etc/profile`\n在文件末尾加入`ulimit –n 65535`\n生效文件 `source /etc/profile`\n检查确认 `ulimit -an`","reference":"","dot":""},{"prefix":"","tag":"chattr -i .user.ini","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]}]},{"title":"磁盘管理","barcolor":"","fold":false,"box":[{"title":"du","fold":false,"list":[{"prefix":"","tag":"du -h --max-depth=1","suffix":"","desc":"磁盘文件夹占用\n其中./root/.pm2/logs\nvar/log/\n\nnginx reload释放引用","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"进程管理","barcolor":"","fold":false,"box":[{"title":"path","fold":false,"list":[{"prefix":"","tag":"pwd","suffix":"","desc":"当前所在的目录","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"~ ","suffix":"user","desc":"当前用户的主目录\n~user表示扩展成用户user的主目录。","url":"","summary":"","reference":"","dot":""}]},{"title":"var","fold":false,"list":[{"prefix":"","tag":"$?","suffix":"","desc":"上一个命令的退出码，用来判断上一个命令是否执行成功。\n返回值是0，表示上一个命令执行成功；\n如果是非零，上一个命令执行失败。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$$","suffix":"","desc":"当前 Shell 的进程 ID","url":"","summary":"","reference":"","dot":""}]},{"title":"port","fold":false,"list":[{"prefix":"","tag":"lsof -i:端口号","suffix":"","desc":"lsof(list open files)是一个列出当前系统打开文件的工具。","url":"","summary":"lsof -i:8080：查看8080端口占用\nlsof abc.txt：显示开启文件abc.txt的进程\nlsof -c abc：显示abc进程现在打开的文件\nlsof -c -p 1234：列出进程号为1234的进程所打开的文件\nlsof -g gid：显示归属gid的进程情况\nlsof +d /usr/local/：显示目录下被进程开启的文件\nlsof +D /usr/local/：同上，但是会搜索目录下的目录，时间较长\nlsof -d 4：显示使用fd为4的进程\nlsof -i -U：显示所有打开的端口和UNIX domain文件","reference":"参考资料|https://www.runoob.com/w3cnote/linux-check-port-usage.html","dot":""}]}]}]},{"column":[{"title":"用户管理","barcolor":"","fold":false,"box":[{"title":"账号","fold":false,"list":[{"prefix":"","tag":"useradd ","suffix":"$name","desc":"添加用户","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"passwd ","suffix":"$name","desc":"设置/更新用户密码","url":"","summary":"","reference":"","dot":""}]},{"title":"分组","fold":false,"list":[{"prefix":"","tag":"usermod ","suffix":"$group $name","desc":"usermod -G root,www 用户名\nusermod -g 自定义分组 用户名","url":"","summary":"","reference":"","dot":""}]}]},{"title":"I/O","barcolor":"","fold":false,"box":[{"title":"output","fold":false,"list":[{"prefix":"","tag":"echo ","suffix":"\"str\" -e","desc":"输出一行或多行文本，多行文本时，需要放在引号内\n-e参数会解释引号（双引号和单引号）里面的特殊字符（比如换行符\\n）","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"crypto","barcolor":"","fold":false,"box":[{"title":"openssl","fold":false,"list":[{"prefix":"openssl ","tag":"genrsa ","suffix":"","desc":"创建\n`openssl genrsa -aes256 -out rsa-key.pem 2048`\n","url":"","summary":"openssl genrsa [args] [numbits]\nargs1 对生成的私钥文件是否要使用加密算法进行对称加密: \n    -des : CBC模式的DES加密 \n    -des3 : CBC模式的3DES加密 \n    -aes128 : CBC模式的AES128加密 \n    -aes192 : CBC模式的AES192加密 \n    -aes256 : CBC模式的AES256加密 \nargs2 对称加密密码\n    -passout passwords\n    其中passwords为对称加密(des、3des、aes)的密码(使用这个参数就省去了console交互提示输入密码的环节) \nargs3 输出文件\n    -out file : 输出证书私钥文件 \n[numbits]: 密钥长度，理解为私钥长度 ","reference":"","dot":""},{"prefix":"openssl ","tag":"rsa","suffix":"","desc":"导出私钥 `openssl rsa -in rsa-key.pem -outform PEM -out rsa-prv.pem`\n导出公钥 `openssl rsa -in rsa-key.pem -outform PEM -pubout -out rsa-pub.pem`","url":"","summary":"","reference":"","dot":""},{"prefix":"csr to pem","tag":" ","suffix":"","desc":".key 转换成 .pem：\n```openssl rsa -in temp.key -out temp.pem```\n.crt 转换成 .pem：\n```openssl x509 -in tmp.crt -out tmp.pem```","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"网络","barcolor":"","fold":false,"box":[{"title":"IP","fold":false,"list":[{"prefix":"","tag":"ifconfig","suffix":"","desc":"显示和配置网络接口\n[windows] *ipconfig*","url":"","summary":"","reference":"参考资料|https://www.runoob.com/linux/linux-comm-ifconfig.html","dot":""},{"prefix":"","tag":"ip addr","suffix":"","desc":"显示和配置网络接口,路由","url":"","summary":"","reference":"","dot":""}]},{"title":"检测","fold":false,"list":[{"prefix":"","tag":"traceroute ","suffix":"host","desc":"从你的计算机到互联网另一端的主机是走的什么路径。\n[windows] *tracert*","url":"","summary":"","reference":"参考资料|https://www.runoob.com/linux/linux-comm-traceroute.html","dot":""},{"prefix":"","tag":"ping ","suffix":"host","desc":"测试与目标主机的连通性,基于IMCP协议\n-q 不显示任何传送封包的信息，只显示最后的结果\n-n 只输出数值\n-R 记录路由过程\n-c count 总次数\n-i 时间间隔\n-t 存活数值：设置存活数值TTL的大小","url":"","summary":"ping网关 `ping -b 192.168.120.1`\nping指定次数 `ping -c 10 192.168.120.206`\n时间间隔和次数限制的ping `ping -c 10 -i 0.5 192.168.120.206`\n多参数使用 `ping -i 3 -s 1024 -t 255 192.168.120.206`\n说明：-i 3 发送周期为 3秒 -s 设置发送包的大小为1024 -t 设置TTL值为 255","reference":"参考资料|https://www.runoob.com/linux/linux-comm-ping.html","dot":""}]},{"title":"防火墙","fold":false,"list":[{"prefix":"","tag":"firewalld","suffix":"","desc":"centos8防火墙会关闭443","url":"","summary":"检查防火墙 systemctl status firewalld.service\n开启防火墙 systemctl start firewalld.service\n关闭防火墙 systemctl stop firewalld.service\n禁用防火墙 systemctl disable firewalld.service","reference":"","dot":""}]}]},{"title":"nginx","barcolor":"","fold":false,"box":[{"title":"nginx","fold":false,"list":[{"prefix":"docker nginx","tag":" ","suffix":"","desc":"CMD `docker run -d -p 127.0.0.1:5120:80 --name nginx2020 -v /f/nginx:/usr/share/nginx/html --volume \"$PWD/conf\":/etc/nginx nginx`\n注意根/","url":"","summary":"`docker container cp mynginx:/etc/nginx .`\n把mynginx容器的/etc/nginx拷贝到当前目录。不要漏掉最后那个点。","reference":"参考资料|https://www.ruanyifeng.com/blog/2018/02/nginx-docker.html","dot":""}]},{"title":"other","fold":false,"list":[{"prefix":"","tag":"certbot","suffix":"","desc":"","url":"","summary":"1.域名指向服务器\n2.certbot certonly\n\n3.cd /etc/nginx/sites-enable\n4.touch icon.jx3box.com.conf\n5.vim icon.jx3box.com.conf\n```\nserver\n{\n    listen 80;\n    server_name icon.jx3box.com;\n    index index.html index.htm default.php default.htm default.html;\n    root /www/wwwroot/jx3-icon;\n    listen 443 ssl http2;\n    ssl_certificate /etc/letsencrypt/live/icon.jx3box.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/icon.jx3box.com/privkey.pem; # managed by Certbot\n    ssl_trusted_certificate /etc/letsencrypt/live/icon.jx3box.com/chain.pem;\n}\n```\n6.nginx -s reload","reference":"install|https://segmentfault.com/a/1190000005797776","dot":"","title":"server"}]},{"title":"config","fold":false,"list":[{"prefix":"","tag":"alias|root","suffix":"","desc":"root：真实的路径是root指定的值加上location指定的值 。\nalias：真实路径都是 alias 指定的路径。\n\n1、alias 只能作用在location中，而root可以存在server、http和location中。\n2、alias 后面必须要用 “/” 结束，否则会找不到文件，而 root 则对 \"/\" 可有可无。","url":"","summary":"","reference":"参考资料|https://blog.csdn.net/tuoni123/article/details/79712246","dot":""}]}]}]},{"column":[{"title":"Docker","barcolor":"","fold":false,"box":[{"title":"镜像","fold":false,"list":[{"prefix":"docker ","tag":"pull ","suffix":"<img>","desc":"抓取镜像","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"image rm","suffix":"","desc":"`docker image rm $id` 删除镜像","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"commit ","suffix":"","desc":"基于现有镜像更新 \n```docker commit -m=\"msg\" -a=\"username\" <oldid> username/imagename:tag```\n示例\n```docker commit -m=\"add something\" -a=\"iruxu\" a1b2c3 iruxu/mydockerimg:v2```\n","url":"","summary":"除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像","reference":"参考资料|https://www.runoob.com/docker/docker-commit-command.html\n镜像构成|https://yeasy.gitbook.io/docker_practice/image/commit","dot":""},{"prefix":"docker ","tag":"image ls","suffix":"","desc":"`docker image ls` 列出镜像\n`docker image prune` 移除虚悬镜像\n`docker image ls -a` 中间镜像","url":"","summary":"","reference":"参考资料|https://yeasy.gitbook.io/docker_practice/image/list","dot":""}]},{"title":"容器","fold":false,"list":[{"prefix":"docker ","tag":"run ","suffix":"-itd <img> /bin/bash","desc":"新建一个正在运行的容器实例\n`docker run -itd --name ubuntu-test ubuntu /bin/bash`","url":"","summary":"注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。","reference":"","dot":""},{"prefix":"docker ","tag":"container ls","suffix":"  -a","desc":"列出容器\n-a包含终止状态","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"container start","suffix":"<id>","desc":"`docker container start|stop|restart xx` 启动或停止容器","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"container logs ","suffix":"<name/id>","desc":"查看日志","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"exec ","suffix":"-it <id> /bin/bash","desc":"进入容器命令行\n`docker exec -it <id> /bin/bash`","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"attach ","suffix":"<name/id>","desc":"进入容器\n注意： 如果从这个 stdin 中 exit，会导致容器的停止。","url":"","summary":"","reference":"参考资料|https://yeasy.gitbook.io/docker_practice/container/attach_exec","dot":""},{"prefix":"docker ","tag":"container rm ","suffix":"<name/id>","desc":"删除容器","url":"","summary":"`docker container prune` 清理所有处于终止状态的容器","reference":"","dot":""},{"prefix":"docker ","tag":"system prune","suffix":"","desc":"清理系统中不再使用的资源，包括未被使用的镜像、容器和网络等\n`docker system prune`","url":"","summary":"","reference":"","dot":""}]},{"title":"设置","fold":false,"list":[{"prefix":"","tag":"--name","suffix":"","desc":"指定一个容器名称","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"-itd","suffix":"","desc":"后台交互式启动\n`docker run -itd -v /local:/usr/src/x python`\n-i interactive \n-d detached \n-t allocate a TTY","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"-v ","suffix":"<local>:<container>","desc":"数据卷挂载\n`docker run -it -v /$PWD:/</container-path> <img>`\n$PWD当前目录，win下需要/开头补充","url":"","summary":"","reference":"参考资料|https://yeasy.gitbooks.io/docker_practice/content/data_management/volume.html","dot":""},{"prefix":"","tag":"-p","suffix":" 80:80 -p 443:443","desc":"本地端口映射=>容器内部，容器有自己的内部网络和 ip 地址（可用inspect查看）\n-p 标记可以多次使用来绑定多个端口\n映射使用一个特定地址`docker run -d -p 127.0.0.1:80:80 nginx:alpine`","url":"","summary":"-p参数：容器的 3000 端口映射到本机的 8000 端口。\n-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。\nkoa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。\n/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。","reference":"参考资料1|https://www.runoob.com/docker/docker-container-connection.html\n参考资料2|https://yeasy.gitbook.io/docker_practice/network/port_mapping","dot":""},{"prefix":"","tag":"--network ","suffix":"<name>","desc":"宿主本地网关默认 172.17.0.1\n+ 查看网络`docker network list`\n+ 新建网络 `docker network create -d bridge test-net`\n+ 加入网络 `docker run -it --name busybox1 --network my-net busybox sh`\n","url":"","summary":"# 网络类型\n+ **bridge** 桥接网络，默认网络类型，容器内不特殊指定，就用此类型。不特殊指定的话,分配的ip为172.17.0.x。\n+ **none** 无指定网络 容器内不指定局域网ip\n+ **host** 主机网络，和主机共用一个ip，会出现和宿主机争抢端口情况，非特殊需要尽量少用","reference":"容器访问宿主|https://blog.csdn.net/yy2yy99/article/details/92760553\n外部访问容器|https://yeasy.gitbooks.io/docker_practice/content/network/port_mapping.html\n容器互联|https://yeasy.gitbooks.io/docker_practice/content/network/linking.html\n网络类型|https://blog.csdn.net/cristianoxm/article/details/115001488","dot":""},{"prefix":"","tag":"--link ","suffix":"name|id:alias","desc":"docker run --link可以用来链接2个容器，使得源容器（被链接的容器）和接收容器（主动去链接的容器）之间可以互相通信，并且接收容器可以获取源容器的一些数据，如源容器的环境变量。\n--link的格式：\n--link <name or id>:alias\n其中，name和id是源容器的name和id，alias是源容器在link下的别名。","url":"","summary":"","reference":"参考资料|https://www.jianshu.com/p/21d66ca6115e","dot":"#66d9ef"},{"prefix":"","tag":"--restart=always","suffix":"","desc":"--restart参数=\n+ `no` 默认策略，在容器退出时不重启容器\n+ `on-failure` 在容器非正常退出时（退出状态非0），才会重启容器\n+ `on-failure:3` 在容器非正常退出时重启容器，最多重启3次\n+ `always` 在容器退出时总是重启容器\n+ `unless-stopped` 在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器","url":"","summary":"# 将正在运行的容器设为自启动\n`docker update --restart=always <CONTAINER ID>`\n# 将自启动的容器取消自启动\n`docker update --restart=no <CONTAINER ID>`","reference":"","dot":""}]},{"title":"命令","fold":false,"list":[{"prefix":"docker ","tag":"cp ","suffix":"","desc":"容器与主机之间的数据拷贝\n主机到容器 `docker cp /www/runoob 96f7f14e99ab:/www/runoob`\n容器到主机 `docker cp  96f7f14e99ab:/www /tmp/`","url":"","summary":"","reference":"参考资料|https://www.runoob.com/docker/docker-cp-command.html","dot":""},{"prefix":"docker ","tag":"logs ","suffix":"<id>","desc":"查看容器内部的标准输出","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"top","suffix":"","desc":"查看容器内部运行的进程","url":"","summary":"","reference":"","dot":""}]},{"title":"构建","fold":false,"list":[{"prefix":"","tag":"Dockerfile","suffix":"","desc":"+ `FROM` :  指定基础镜像\n+ `ENV` : 设置环境变量（多命令支持展开$env_name）\n+ `COPY` : 复制 上下文（context） 目录下的文件至指定目录 `COPY ./package.json /app/`\n+ `WORKDIR` : 指定接下来的工作目录\n+ `RUN` : shell命令\n+ `EXPOSE` : 暴露端口\n+ `CMD` : shell命令，可数组\n\n减少镜像层，多个命令合并在一个RUN中，并执行好相关清理\n","url":"","summary":"1. ARG(vs ENV): 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的，使用方式为${arg_name}。ARG 指令有生效范围，如果在 FROM 指令之前指定，那么只能用于 FROM 指令中\n2. ADD(vs COPY): 增加了一些功能。比如源路径可以是一个 URL。\n3. ONBUILD：重复需要执行的","reference":"官方文档|https://docs.docker.com/engine/reference/builder/\nONBUILD|https://yeasy.gitbook.io/docker_practice/image/dockerfile/onbuild","dot":""},{"prefix":"","tag":".dockerignore","suffix":"","desc":"构建镜像忽略文件\n```\n.git\nnode_modules\nnpm-debug.log\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"build -t ","suffix":"<name>:<0.0.1> .","desc":"+ latest `docker image build -t koa-demo .`\n+ 指定版本 `docker image build -t koa-demo:0.0.1 .`\n+ 可用git repo构建`docker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world`\n+ 用给定的压缩包构建 `docker build http://server/context.tar.gz`","url":"","summary":"-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。\n最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。","reference":"入门教程|https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\n指令详解|https://www.runoob.com/docker/docker-dockerfile.html\n参考资料|https://yeasy.gitbook.io/docker_practice/image/build","dot":""},{"prefix":"","tag":"docker-compose.yml","suffix":"","desc":"1. `command: echo \"hello world\"` 覆盖容器启动后默认执行的命令\n2. `dns: 8.8.8.8` 自定义DNS\n3. `env_file: .env` 从文件中获取环境变量\n4. `tty:true` 模拟一个伪终端(nodejs)\n5. `privileged: true` 允许容器中运行一些特权命令","url":"","summary":"```\nversion: \"3.7\"\nservices:\n    wordpress: //服务名称\n        container_name: custom-name //自定义容器名称\n        image: wordpress:latest //指定镜像\n        restart: always //开机启动\n        depends_on: redis //依赖的服务，启动顺序\n        networks:\n            - some-network //加入的某个网络\n        ports:\n            - 127.0.0.1:7100:80 //端口映射本地=>容器内部\n        environment:\n            WORDPRESS_DB_HOST: 172.17.0.1:3306 //外部宿主mysql\n            WORDPRESS_DB_USER: root\n            WORDPRESS_DB_PASSWORD: 123456\n            WORDPRESS_DB_NAME: testdb\n        volumes:\n            - /f/JX3/jx3box-wp:/var/www/html //数据卷本地=>容器内部\n        command: echo \"hello world\" //覆盖容器启动后默认执行的命令\nnetworks:\n  some-network:  //创建的网络\n  other-network:\n\nvolumes:\n  mysql_data:  //创建的数据卷\n```","reference":"官方文档|https://docs.docker.com/compose/compose-file/\nv3|https://docs.docker.com/compose/compose-file/compose-file-v3/\n模板文件|https://yeasy.gitbook.io/docker_practice/compose/compose_file","dot":""},{"prefix":"","tag":"docker-compose up|start|stop","suffix":"","desc":"up 拉起多个服务，构建容器\nstart 启动已有容器\nstop 停止已有容器","url":"","summary":"","reference":"入门教程|https://leehao.me/Docker-Compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/\nWordpress|https://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html","dot":""},{"prefix":"","tag":"YAML","suffix":"","desc":"`:` 对象\n`-` 数组\n`~` null","url":"","summary":"","reference":"参考资料|https://www.ruanyifeng.com/blog/2016/07/yaml.html","dot":""}]},{"title":"发布","fold":false,"list":[{"prefix":"docker ","tag":"login","suffix":"","desc":"登录 iruxu/rx6shadow\n登出 logout","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"tag ","suffix":"[imageName] [username]/[repository]:[tag]","desc":"`docker image tag [imageName] [username]/[repository]:[tag]`\n`docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1`","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"push ","suffix":"[username]/[repository]:[tag]","desc":"`docker image push [username]/[repository]:[tag]`","url":"","summary":"","reference":"参考资料|https://jerrymei.cn/docker-build-or-commit-images/","dot":""}]},{"title":"示例","fold":false,"list":[{"prefix":"","tag":"nginx","suffix":"","desc":"下载镜像\n`docker pull nginx`\n创建测试\n`docker run --name nginx-test -p 80:80 -p 443:443 -d nginx`\n拷贝默认配置\n`docker cp 2036b5b441e8:/etc/nginx /f/`\n绑定本地配置至容器内部\n`docker run --name nginx-local -p 80:80 -p 443:443 -d -v $PWD/nginx:/etc/nginx nginx`","url":"","summary":"# nginx配置\nipconfig获取IPV4本机IP\nproxy_pass http://192.168.4.2:5160\n\n# 回忆\n2020/04/21 5:14 image要写在最后，-v写在前面一直报exec不存在错误；443端口遗漏问题","reference":"参考资料|https://blog.csdn.net/weixin_43064185/article/details/101705663\nSSL问题|https://stackoverflow.com/questions/36725901/connection-refused-nginx-https-reverse-proxy-in-docker-container","dot":""},{"prefix":"","tag":" mysql","suffix":"","desc":"下载镜像\n`docker pull mysql`\n`docker pull arm64v8/mysql:oracle`\n启动容器\n`docker run --name mysql5.7 --privileged=true -p 3306:3306 -v /f/Mysql/v5.7:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7`\n`docker run --name mysql8 --privileged=true -p 3306:3306 -v $PWD/Documents/Code/env/mysql8:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d arm64v8/mysql:oracle`","url":"","summary":"# 宿主mysql授权\n```\nmysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '12345678' WITH GRANT OPTION;\nmysql>flush privileges;\n// 其中各字符的含义：\n// *.* 对任意数据库任意表有效\n// \"root\" \"12345678\" 是数据库用户名和密码\n// '%' 允许访问数据库的IP地址，%意思是任意IP，也可以指定IP\n// flush privileges 刷新权限信息\n```","reference":"Mysql8-navicat|https://blog.csdn.net/vkingnew/article/details/80105323\n访问宿主mysql|https://blog.csdn.net/yy2yy99/article/details/92760553\narm mysql|https://www.emmanuelgautier.com/blog/mysql-docker-arm-m1","dot":""},{"prefix":"","tag":"redis","suffix":"","desc":"下载镜像\n`docker pull redis`\n创建容器\n`docker run -itd --name redis-test -p 6379:6379 redis`","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"","tag":"下载安装","suffix":"","desc":"1. 下载 [win](https://www.runoob.com/docker/windows-docker-install.html) | [mac](https://www.runoob.com/docker/macos-docker-install.html)\n2. 安装并重启\n3. 配置镜像源\n配置文件添加`\"registry-mirrors\": [\"https://xxx.mirror.aliyuncs.com\"]`\n4. 配置可挂载磁盘大小等","url":"","summary":"","reference":"参考资料|https://www.runoob.com/docker/docker-mirror-acceleration.html","dot":""},{"prefix":"","tag":"入门教程","suffix":"","desc":"","url":"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"进阶教程","suffix":"","desc":"","url":"https://yeasy.gitbook.io/docker_practice/","summary":"","reference":"","dot":""},{"prefix":"","tag":"全部命令","suffix":"","desc":"全部命令","url":"https://www.runoob.com/docker/docker-command-manual.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"常见问题","suffix":"","desc":"1.超时错误","url":"","summary":"## 超时错误\n1.node_modules忽略\n2.修改超时时间\n```\nexport DOCKER_CLIENT_TIMEOUT=120\nexport COMPOSE_HTTP_TIMEOUT=120\n```\n3.重启docker","reference":"超时错误|https://github.com/docker/compose/issues/3927","dot":""}]}]}]},{"column":[{"title":"Bash","barcolor":"","fold":false,"box":[{"title":"基本语法","fold":false,"list":[{"prefix":"","tag":";  &&  ||","suffix":"","desc":"`;  &&  ||` 多条命令\n`type -a cmd` 命令信息\n`Ctrl + U`：从光标位置删除到行首。\n`Ctrl + K`：从光标位置删除到行尾。\n`Ctrl + L`：clear\n`Ctrl + C`：中止当前正在执行的命令。\n`Ctrl + D`：关闭 Shell 会话。\n`↑，↓`：浏览已执行命令的历史记录。","url":"","summary":"","reference":"","dot":"","title":"vim"}]},{"title":"glob","fold":true,"list":[{"prefix":"","tag":"set","suffix":" -f","desc":"`set -f` 关闭glob\n`set +f` 开启glob","url":"","summary":"","reference":"glob|https://wangdoc.com/bash/expansion.html","dot":""},{"prefix":"","tag":"?","suffix":"","desc":"`?`字符代表文件路径里面的*任意单个字符，不包括空字符*。\n比如，Data???匹配所有Data后面跟着三个字符的文件名。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"*","suffix":"","desc":"`*`字符代表文件路径里面的*任意数量的字符，包括零个字符*。\n*只匹配当前目录，不会匹配子目录。\n\n注意，*不会匹配隐藏文件（以.开头的文件）。\n`echo .*` 显示所有隐藏文件\n`echo .[!.]*` 只显示正常的隐藏文件，不显示 . 和 .. 这两个特殊文件","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"[start-end]{start..end}","suffix":"","desc":"匹配一个连续的范围\n[!start-end] 匹配不属于这个范围的字符","url":"","summary":"[a-z]：所有小写字母。\n[a-zA-Z]：所有小写字母与大写字母。\n[a-zA-Z0-9]：所有小写字母、大写字母与数字。\n[abc]*：所有以a、b、c字符之一开头的文件名。\nprogram.[co]：文件program.c与文件program.o。\nBACKUP.[0-9][0-9][0-9]：所有以BACKUP.开头，后面是三个数字的文件名。","reference":"","dot":""},{"prefix":"","tag":"[xyz]","suffix":"","desc":"匹配xyz\n[!xyz]或[^xyz]排除xyz","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"{x,y,z}","suffix":"suffix","desc":"可扩展xsuffix,ysuffix","url":"","summary":"","reference":"","dot":""}]},{"title":"变量","fold":false,"list":[{"prefix":"","tag":"env","suffix":"","desc":"全部变量","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"echo ","suffix":"$PATH","desc":"`echo $PATH` 或 `printenv PATH` 查看指定变量","url":"","summary":"","reference":"","dot":""}]},{"title":"vim","fold":false,"list":[{"prefix":"","tag":"dd","suffix":"","desc":"删除当前行","url":"","summary":"","reference":"","dot":""}]}]},{"title":"其他","barcolor":"","fold":false,"box":[{"title":"参考资料","fold":false,"list":[{"prefix":"","tag":"Bash教程","suffix":"","desc":"","url":"https://wangdoc.com/bash/index.html","summary":"","reference":"","dot":""}]}]}]}]}